{"version":3,"sources":["../../../src/constants/bt709.ts","../../../src/constants/index.ts","../../../src/conversion/rgb2xyz.ts","../../../src/utils/arithmetic.ts","../../../src/conversion/rgb2hsl.ts","../../../src/conversion/xyz2lab.ts","../../../src/conversion/rgb2lab.ts","../../../src/conversion/lab2xyz.ts","../../../src/conversion/xyz2rgb.ts","../../../src/conversion/lab2rgb.ts","../../../src/conversion/index.ts","../../../src/distance/distanceCalculator.ts","../../../src/distance/cie94.ts","../../../src/distance/ciede2000.ts","../../../src/distance/cmetric.ts","../../../src/distance/euclidean.ts","../../../src/distance/manhattan.ts","../../../src/distance/pngQuant.ts","../../../src/distance/index.ts","../../../src/palette/paletteQuantizer.ts","../../../src/utils/point.ts","../../../src/utils/pointContainer.ts","../../../src/utils/palette.ts","../../../src/utils/hueStatistics.ts","../../../src/utils/progressTracker.ts","../../../src/utils/index.ts","../../../../src/palette/neuquant/neuquant.ts","../../../../src/palette/neuquant/neuquantFloat.ts","../../../../src/palette/rgbquant/colorHistogram.ts","../../../../src/palette/rgbquant/rgbquant.ts","../../../../src/palette/wu/wuQuant.ts","../../../src/palette/index.ts","../../../src/image/imageQuantizer.ts","../../../src/image/nearestColor.ts","../../../src/image/array.ts","../../../../src/image/spaceFillingCurves/hilbertCurve.ts","../../../src/image/riemersma.ts","../../../src/image/index.ts","../../../src/quality/ssim.ts","../../../src/quality/index.ts","node_modules/core-js/modules/_global.js","node_modules/core-js/modules/_core.js","node_modules/core-js/modules/_is-object.js","node_modules/core-js/modules/_an-object.js","node_modules/core-js/modules/_fails.js","node_modules/core-js/modules/_descriptors.js","node_modules/core-js/modules/_dom-create.js","node_modules/core-js/modules/_ie8-dom-define.js","node_modules/core-js/modules/_to-primitive.js","node_modules/core-js/modules/_object-dp.js","node_modules/core-js/modules/_property-desc.js","node_modules/core-js/modules/_hide.js","node_modules/core-js/modules/_has.js","node_modules/core-js/modules/_uid.js","node_modules/core-js/modules/_library.js","node_modules/core-js/modules/_shared.js","node_modules/core-js/modules/_function-to-string.js","node_modules/core-js/modules/_redefine.js","node_modules/core-js/modules/_a-function.js","node_modules/core-js/modules/_ctx.js","node_modules/core-js/modules/_export.js","node_modules/core-js/modules/_invoke.js","node_modules/core-js/modules/_html.js","node_modules/core-js/modules/_cof.js","node_modules/core-js/modules/_task.js","node_modules/core-js/modules/web.immediate.js","node_modules/core-js/fn/set-immediate.js","../../src/basicAPI.ts","../../src/image-q.ts","index.js"],"names":["worker","padTime","number","getTime","now","Date","getHours","getMinutes","getSeconds","getMilliseconds","setPalette","points","forEach","point","index","document","getElementById","style","backgroundColor","r","g","b","display","setInterval","innerText","window","Worker","onmessage","message","data","addEventListener","event","preventDefault","url","target","elements","value","image","onload","href","canvas","createElement","width","naturalWidth","height","naturalHeight","context","getContext","drawImage","imageData","getImageData","checked","postMessage","pointContainer","iq","utils","PointContainer","fromImageData","buildPaletteSync","colors","_pointArray","src"],"mappings":"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","file":"web-worker-demo.72f2582b.js","sourceRoot":"..","sourcesContent":["/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * constants.ts - part of Image Quantization Library\n */\n\n/**\n * sRGB (based on ITU-R Recommendation BT.709)\n * http://en.wikipedia.org/wiki/SRGB\n */\nexport enum Y {\n  RED = .2126, GREEN = .7152, BLUE = .0722, WHITE = 1,\n}\n\n// tslint:disable-next-line:naming-convention\nexport enum x {\n  RED = .6400, GREEN = .3000, BLUE = .1500, WHITE = .3127,\n}\n\n// tslint:disable-next-line:naming-convention\nexport enum y {\n  RED = .3300, GREEN = .6000, BLUE = .0600, WHITE = .3290,\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * constants.ts - part of Image Quantization Library\n */\nimport * as bt709 from './bt709';\n\nexport {\n  bt709,\n};\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * rgb2xyz.ts - part of Image Quantization Library\n */\nfunction correctGamma(n: number) {\n  return n > 0.04045 ? Math.pow((n + 0.055) / 1.055, 2.4) : n / 12.92;\n}\n\nexport function rgb2xyz(r: number, g: number, b: number) {\n  // gamma correction, see https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation\n  r = correctGamma(r / 255);\n  g = correctGamma(g / 255);\n  b = correctGamma(b / 255);\n\n  // Observer. = 2°, Illuminant = D65\n  return {\n    x: r * 0.4124 + g * 0.3576 + b * 0.1805,\n    y: r * 0.2126 + g * 0.7152 + b * 0.0722,\n    z: r * 0.0193 + g * 0.1192 + b * 0.9505,\n  };\n}\n","export function degrees2radians(n: number) {\n  return n * (Math.PI / 180);\n}\n\nexport function max3(a: number, b: number, c: number) {\n  let m = a;\n  if (m < b) m = b;\n  if (m < c) m = c;\n  return m;\n}\n\nexport function min3(a: number, b: number, c: number) {\n  let m = a;\n  if (m > b) m = b;\n  if (m > c) m = c;\n  return m;\n}\n\nexport function intInRange(value: number, low: number, high: number) {\n  if (value > high) value = high;\n  if (value < low) value = low;\n  return value | 0;\n}\n\nexport function inRange0to255Rounded(n: number) {\n  n = Math.round(n);\n  if (n > 255) n = 255;\n  else if (n < 0) n = 0;\n  return n;\n}\n\nexport function inRange0to255(n: number) {\n  if (n > 255) n = 255;\n  else if (n < 0) n = 0;\n  return n;\n}\n\nexport function stableSort<T>(arrayToSort: T[], callback: (a: T, b: T) => number) {\n  const type = typeof arrayToSort[ 0 ];\n  let sorted: T[];\n\n  if (type === 'number' || type === 'string') {\n    const ord = Object.create(null); // tslint:disable-line:no-null-keyword\n    for (let i = 0, l = arrayToSort.length; i < l; i++) {\n      const val: string = arrayToSort[ i ] as any; // tslint:disable-line:no-any\n      if (ord[ val ] || ord[ val ] === 0) continue;\n      ord[ val ] = i;\n    }\n\n    sorted = arrayToSort.sort(function (a, b) {\n      return callback(a, b) || ord[ a ] - ord[ b ];\n    });\n  } else {\n    const ord2 = arrayToSort.slice(0);\n    sorted = arrayToSort.sort(function (a, b) {\n      return callback(a, b) || ord2.indexOf(a) - ord2.indexOf(b);\n    });\n  }\n\n  return sorted;\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * rgb2hsl.ts - part of Image Quantization Library\n */\nimport { min3, max3 } from '../utils/arithmetic';\n\n/**\n * Calculate HSL from RGB\n * Hue is in degrees [0..360]\n * Lightness: [0..1]\n * Saturation: [0..1]\n * http://web.archive.org/web/20060914040436/http://local.wasp.uwa.edu.au/~pbourke/colour/hsl/\n */\nexport function rgb2hsl(r: number, g: number, b: number) {\n  const min = min3(r, g, b);\n  const max = max3(r, g, b);\n  const delta = max - min;\n  const l = (min + max) / 510;\n\n  let s = 0;\n  if (l > 0 && l < 1) s = delta / (l < 0.5 ? (max + min) : (510 - max - min));\n\n  let h = 0;\n  if (delta > 0) {\n    if (max === r) {\n      h = (g - b) / delta;\n    } else if (max === g) {\n      h = (2 + (b - r) / delta);\n    } else {\n      h = (4 + (r - g) / delta);\n    }\n\n    h *= 60;\n    if (h < 0) h += 360;\n  }\n  return { h, s, l };\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * xyz2lab.ts - part of Image Quantization Library\n */\nconst refX = 0.95047; // ref_X =  95.047   Observer= 2°, Illuminant= D65\nconst refY = 1.00000; // ref_Y = 100.000\nconst refZ = 1.08883; // ref_Z = 108.883\n\nfunction pivot(n: number) {\n  return n > 0.008856 ? Math.pow(n, 1 / 3) : (7.787 * n + 16 / 116);\n}\n\nexport function xyz2lab(x: number, y: number, z: number) {\n  x = pivot(x / refX);\n  y = pivot(y / refY);\n  z = pivot(z / refZ);\n\n  if ((116 * y) - 16 < 0) throw new Error('xxx');\n  return {\n    L: Math.max(0, (116 * y) - 16),\n    a: 500 * (x - y),\n    b: 200 * (y - z),\n  };\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * rgb2lab.ts - part of Image Quantization Library\n */\nimport { rgb2xyz } from './rgb2xyz';\nimport { xyz2lab } from './xyz2lab';\n\nexport function rgb2lab(r: number, g: number, b: number) {\n  const xyz = rgb2xyz(r, g, b);\n  return xyz2lab(xyz.x, xyz.y, xyz.z);\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * lab2xyz.ts - part of Image Quantization Library\n */\nconst refX = 0.95047; // ref_X =  95.047   Observer= 2°, Illuminant = D65\nconst refY = 1.00000; // ref_Y = 100.000\nconst refZ = 1.08883; // ref_Z = 108.883\n\nfunction pivot(n: number) {\n  return n > 0.206893034 ? Math.pow(n, 3) : (n - 16 / 116) / 7.787;\n}\n\n// tslint:disable-next-line:naming-convention\nexport function lab2xyz(L: number, a: number, b: number) {\n  const y = (L + 16) / 116;\n  const x = a / 500 + y;\n  const z = y - b / 200;\n\n  return {\n    x: refX * pivot(x),\n    y: refY * pivot(y),\n    z: refZ * pivot(z),\n  };\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * xyz2rgb.ts - part of Image Quantization Library\n */\nimport { inRange0to255Rounded } from '../utils/arithmetic';\n\n// gamma correction, see https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation\nfunction correctGamma(n: number) {\n  return n > 0.0031308 ? 1.055 * Math.pow(n, 1 / 2.4) - 0.055 : 12.92 * n;\n}\n\nexport function xyz2rgb(x: number, y: number, z: number) {\n  // Observer. = 2°, Illuminant = D65\n  const r = correctGamma(x * 3.2406 + y * -1.5372 + z * -0.4986);\n  const g = correctGamma(x * -0.9689 + y * 1.8758 + z * 0.0415);\n  const b = correctGamma(x * 0.0557 + y * -0.2040 + z * 1.0570);\n\n  return {\n    r: inRange0to255Rounded(r * 255),\n    g: inRange0to255Rounded(g * 255),\n    b: inRange0to255Rounded(b * 255),\n  };\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * lab2rgb.ts - part of Image Quantization Library\n */\nimport { lab2xyz } from './lab2xyz';\nimport { xyz2rgb } from './xyz2rgb';\n\n// tslint:disable-next-line:naming-convention\nexport function lab2rgb(L: number, a: number, b: number) {\n  const xyz = lab2xyz(L, a, b);\n  return xyz2rgb(xyz.x, xyz.y, xyz.z);\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * iq.ts - Image Quantization Library\n */\nexport { rgb2xyz } from './rgb2xyz';\nexport { rgb2hsl } from './rgb2hsl';\nexport { rgb2lab } from './rgb2lab';\nexport { lab2xyz } from './lab2xyz';\nexport { lab2rgb } from './lab2rgb';\nexport { xyz2lab } from './xyz2lab';\nexport { xyz2rgb } from './xyz2rgb';\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * common.ts - part of Image Quantization Library\n */\nimport { Point, PointRGBA } from '../utils/point';\n\nexport abstract class AbstractDistanceCalculator {\n  protected _maxDistance!: number;\n  protected _whitePoint!: {\n    r: number;\n    g: number;\n    b: number;\n    a: number;\n  };\n\n  constructor() {\n    this._setDefaults();\n\n    // set default maximal color component deltas (255 - 0 = 255)\n    this.setWhitePoint(255, 255, 255, 255);\n  }\n\n  setWhitePoint(r: number, g: number, b: number, a: number) {\n    this._whitePoint = {\n      r: (r > 0) ? 255 / r : 0,\n      g: (g > 0) ? 255 / g : 0,\n      b: (b > 0) ? 255 / b : 0,\n      a: (a > 0) ? 255 / a : 0,\n    };\n    this._maxDistance = this.calculateRaw(r, g, b, a, 0, 0, 0, 0);\n  }\n\n  calculateNormalized(colorA: PointRGBA, colorB: PointRGBA) {\n    return this.calculateRaw(colorA.r, colorA.g, colorA.b, colorA.a, colorB.r, colorB.g, colorB.b, colorB.a) / this._maxDistance;\n  }\n\n  /**\n   * Calculate raw distance (non-normalized)\n   */\n  abstract calculateRaw(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number): number;\n\n  protected abstract _setDefaults(): void;\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * cie94.ts - part of Image Quantization Library\n */\nimport { AbstractDistanceCalculator } from './distanceCalculator';\nimport { rgb2lab } from '../conversion/rgb2lab';\nimport { inRange0to255 } from '../utils/arithmetic';\n\n/**\n * CIE94 method of delta-e\n * http://en.wikipedia.org/wiki/Color_difference#CIE94\n */\nexport abstract class AbstractCIE94 extends AbstractDistanceCalculator {\n  /**\n   * Weight in distance: 0.25\n   * Max DeltaE: 100\n   * Max DeltaA: 255\n   */\n  protected _kA!: number;\n  protected _Kl!: number; // tslint:disable-line:naming-convention\n  protected _K1!: number; // tslint:disable-line:naming-convention\n  protected _K2!: number; // tslint:disable-line:naming-convention\n\n  calculateRaw(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number) {\n    const lab1 = rgb2lab(inRange0to255(r1 * this._whitePoint.r), inRange0to255(g1 * this._whitePoint.g), inRange0to255(b1 * this._whitePoint.b));\n    const lab2 = rgb2lab(inRange0to255(r2 * this._whitePoint.r), inRange0to255(g2 * this._whitePoint.g), inRange0to255(b2 * this._whitePoint.b));\n\n    const dL = lab1.L - lab2.L;\n    const dA = lab1.a - lab2.a;\n    const dB = lab1.b - lab2.b;\n    const c1 = Math.sqrt(lab1.a * lab1.a + lab1.b * lab1.b);\n    const c2 = Math.sqrt(lab2.a * lab2.a + lab2.b * lab2.b);\n    const dC = c1 - c2;\n\n    let deltaH = dA * dA + dB * dB - dC * dC;\n    deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);\n\n    const dAlpha = (a2 - a1) * this._whitePoint.a * this._kA;\n\n    // TODO: add alpha channel support\n    return Math.sqrt(\n      Math.pow(dL / this._Kl, 2) +\n      Math.pow(dC / (1.0 + this._K1 * c1), 2) +\n      Math.pow(deltaH / (1.0 + this._K2 * c1), 2) +\n      Math.pow(dAlpha, 2),\n    );\n  }\n}\n\nexport class CIE94Textiles extends AbstractCIE94 {\n  protected _setDefaults() {\n    this._Kl = 2.0;\n    this._K1 = 0.048;\n    this._K2 = 0.014;\n    this._kA = 0.25 * 50 / 255;\n  }\n}\n\nexport class CIE94GraphicArts extends AbstractCIE94 {\n  protected _setDefaults() {\n    this._Kl = 1.0;\n    this._K1 = 0.045;\n    this._K2 = 0.015;\n    this._kA = 0.25 * 100 / 255;\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * ciede2000.ts - part of Image Quantization Library\n */\nimport { AbstractDistanceCalculator } from './distanceCalculator';\nimport { rgb2lab } from '../conversion/rgb2lab';\nimport { degrees2radians, inRange0to255 } from '../utils/arithmetic';\n\n// tslint:disable:variable-name\n// tslint:disable:naming-convention\n\n/**\n * CIEDE2000 algorithm - Adapted from Sharma et al's MATLAB implementation at\n * http://www.ece.rochester.edu/~gsharma/ciede2000/\n */\nexport class CIEDE2000 extends AbstractDistanceCalculator {\n  /**\n   * Weight in distance: 0.25\n   * Max DeltaE: 100\n   * Max DeltaA: 255\n   */\n  private static readonly _kA = 0.25 * 100 / 255;\n  private static readonly _pow25to7: number = Math.pow(25, 7);\n  private static readonly _deg360InRad: number = degrees2radians(360);\n  private static readonly _deg180InRad: number = degrees2radians(180);\n  private static readonly _deg30InRad: number = degrees2radians(30);\n  private static readonly _deg6InRad: number = degrees2radians(6);\n  private static readonly _deg63InRad: number = degrees2radians(63);\n  private static readonly _deg275InRad: number = degrees2radians(275);\n  private static readonly _deg25InRad: number = degrees2radians(25);\n\n  protected _setDefaults() {}\n\n  private static _calculatehp(b: number, ap: number) {\n    const hp = Math.atan2(b, ap);\n    if (hp >= 0) return hp;\n    return hp + CIEDE2000._deg360InRad;\n  }\n\n  private static _calculateRT(ahp: number, aCp: number) {\n    const aCp_to_7 = Math.pow(aCp, 7.0);\n    const R_C = 2.0 * Math.sqrt(aCp_to_7 / (aCp_to_7 + CIEDE2000._pow25to7)); // 25^7\n    const delta_theta = CIEDE2000._deg30InRad * Math.exp(-Math.pow((ahp - CIEDE2000._deg275InRad) / CIEDE2000._deg25InRad, 2.0));\n    return -Math.sin(2.0 * delta_theta) * R_C;\n  }\n\n  private static _calculateT(ahp: number) {\n    return 1.0 - .17 * Math.cos(ahp - CIEDE2000._deg30InRad) + .24 * Math.cos(ahp * 2.0) + .32 * Math.cos(ahp * 3.0 + CIEDE2000._deg6InRad) - .2 * Math.cos(ahp * 4.0 - CIEDE2000._deg63InRad);\n  }\n\n  private static _calculate_ahp(C1pC2p: number, h_bar: number, h1p: number, h2p: number) {\n    const hpSum = h1p + h2p;\n    if (C1pC2p === 0) return hpSum;\n    if (h_bar <= CIEDE2000._deg180InRad) return hpSum / 2.0;\n    if (hpSum < CIEDE2000._deg360InRad) return (hpSum + CIEDE2000._deg360InRad) / 2.0;\n    return (hpSum - CIEDE2000._deg360InRad) / 2.0;\n  }\n\n  private static _calculate_dHp(C1pC2p: number, h_bar: number, h2p: number, h1p: number) {\n    let dhp: number;\n    if (C1pC2p === 0) {\n      dhp = 0;\n    } else if (h_bar <= CIEDE2000._deg180InRad) {\n      dhp = h2p - h1p;\n    } else if (h2p <= h1p) {\n      dhp = h2p - h1p + CIEDE2000._deg360InRad;\n    } else {\n      dhp = h2p - h1p - CIEDE2000._deg360InRad;\n    }\n    return 2.0 * Math.sqrt(C1pC2p) * Math.sin(dhp / 2.0);\n  }\n\n  calculateRaw(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number) {\n    const lab1 = rgb2lab(inRange0to255(r1 * this._whitePoint.r), inRange0to255(g1 * this._whitePoint.g), inRange0to255(b1 * this._whitePoint.b));\n    const lab2 = rgb2lab(inRange0to255(r2 * this._whitePoint.r), inRange0to255(g2 * this._whitePoint.g), inRange0to255(b2 * this._whitePoint.b));\n    const dA = (a2 - a1) * this._whitePoint.a * CIEDE2000._kA;\n    const dE2 = this.calculateRawInLab(lab1, lab2);\n\n    return Math.sqrt(dE2 + dA * dA);\n  }\n\n  calculateRawInLab(Lab1: { L: number; a: number; b: number }, Lab2: { L: number; a: number; b: number }) {\n    // Get L,a,b values for color 1\n    const L1 = Lab1.L;\n    const a1 = Lab1.a;\n    const b1 = Lab1.b;\n\n    // Get L,a,b values for color 2\n    const L2 = Lab2.L;\n    const a2 = Lab2.a;\n    const b2 = Lab2.b;\n\n    // Calculate Cprime1, Cprime2, Cabbar\n    const C1 = Math.sqrt(a1 * a1 + b1 * b1);\n    const C2 = Math.sqrt(a2 * a2 + b2 * b2);\n    const pow_a_C1_C2_to_7 = Math.pow((C1 + C2) / 2.0, 7.0);\n\n    const G = 0.5 * (1.0 - Math.sqrt(pow_a_C1_C2_to_7 / (pow_a_C1_C2_to_7 + CIEDE2000._pow25to7))); // 25^7\n    const a1p = (1.0 + G) * a1;\n    const a2p = (1.0 + G) * a2;\n\n    const C1p = Math.sqrt(a1p * a1p + b1 * b1);\n    const C2p = Math.sqrt(a2p * a2p + b2 * b2);\n    const C1pC2p = C1p * C2p;\n\n    // Angles in Degree.\n    const h1p = CIEDE2000._calculatehp(b1, a1p);\n    const h2p = CIEDE2000._calculatehp(b2, a2p);\n    const h_bar = Math.abs(h1p - h2p);\n    const dLp = L2 - L1;\n    const dCp = C2p - C1p;\n    const dHp = CIEDE2000._calculate_dHp(C1pC2p, h_bar, h2p, h1p);\n    const ahp = CIEDE2000._calculate_ahp(C1pC2p, h_bar, h1p, h2p);\n\n    const T = CIEDE2000._calculateT(ahp);\n\n    const aCp = (C1p + C2p) / 2.0;\n    const aLp_minus_50_square = Math.pow((L1 + L2) / 2.0 - 50.0, 2.0);\n    const S_L = 1.0 + (.015 * aLp_minus_50_square) / Math.sqrt(20.0 + aLp_minus_50_square);\n    const S_C = 1.0 + .045 * aCp;\n    const S_H = 1.0 + .015 * T * aCp;\n\n    const R_T = CIEDE2000._calculateRT(ahp, aCp);\n\n    const dLpSL = dLp / S_L; // S_L * kL, where kL is 1.0\n    const dCpSC = dCp / S_C; // S_C * kC, where kC is 1.0\n    const dHpSH = dHp / S_H; // S_H * kH, where kH is 1.0\n\n    return Math.pow(dLpSL, 2) + Math.pow(dCpSC, 2) + Math.pow(dHpSH, 2) + R_T * dCpSC * dHpSH;\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * cmetric.ts - part of Image Quantization Library\n */\nimport { AbstractDistanceCalculator } from './distanceCalculator';\n\n/**\n * TODO: Name it: http://www.compuphase.com/cmetric.htm\n */\nexport class CMetric extends AbstractDistanceCalculator {\n  calculateRaw(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number) {\n    const rmean = (r1 + r2) / 2 * this._whitePoint.r;\n    const r = (r1 - r2) * this._whitePoint.r;\n    const g = (g1 - g2) * this._whitePoint.g;\n    const b = (b1 - b2) * this._whitePoint.b;\n    const dE = ((((512 + rmean) * r * r) >> 8) + 4 * g * g + (((767 - rmean) * b * b) >> 8));\n    const dA = (a2 - a1) * this._whitePoint.a;\n\n    return Math.sqrt(dE + dA * dA);\n  }\n\n  protected _setDefaults() {}\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * euclidean.ts - part of Image Quantization Library\n */\nimport { AbstractDistanceCalculator } from './distanceCalculator';\nimport { Y } from '../constants/bt709';\n\n/**\n * Euclidean color distance\n */\nexport abstract class AbstractEuclidean extends AbstractDistanceCalculator {\n  protected _kR!: number;\n  protected _kG!: number;\n  protected _kB!: number;\n  protected _kA!: number;\n\n  calculateRaw(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number) {\n    const dR = r2 - r1;\n    const dG = g2 - g1;\n    const dB = b2 - b1;\n    const dA = a2 - a1;\n    return Math.sqrt(this._kR * dR * dR + this._kG * dG * dG + this._kB * dB * dB + this._kA * dA * dA);\n  }\n}\n\nexport class Euclidean extends AbstractEuclidean {\n  protected _setDefaults() {\n    this._kR = 1;\n    this._kG = 1;\n    this._kB = 1;\n    this._kA = 1;\n  }\n}\n\n/**\n * Euclidean color distance (RGBQuant modification w Alpha)\n */\nexport class EuclideanBT709 extends AbstractEuclidean {\n  protected _setDefaults() {\n    this._kR = Y.RED;\n    this._kG = Y.GREEN;\n    this._kB = Y.BLUE;\n    // TODO: what is the best coefficient below?\n    this._kA = 1;\n  }\n}\n\n/**\n * Euclidean color distance (RGBQuant modification w/o Alpha)\n */\nexport class EuclideanBT709NoAlpha extends AbstractEuclidean {\n  protected _setDefaults() {\n    this._kR = Y.RED;\n    this._kG = Y.GREEN;\n    this._kB = Y.BLUE;\n    this._kA = 0;\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * manhattanNeuQuant.ts - part of Image Quantization Library\n */\nimport { AbstractDistanceCalculator } from './distanceCalculator';\nimport { Y } from '../constants/bt709';\n\n/**\n * Manhattan distance (NeuQuant modification) - w/o sRGB coefficients\n */\nexport abstract class AbstractManhattan extends AbstractDistanceCalculator {\n  protected _kR!: number;\n  protected _kG!: number;\n  protected _kB!: number;\n  protected _kA!: number;\n\n  calculateRaw(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number) {\n    let dR = r2 - r1;\n    let dG = g2 - g1;\n    let dB = b2 - b1;\n    let dA = a2 - a1;\n    if (dR < 0) dR = 0 - dR;\n    if (dG < 0) dG = 0 - dG;\n    if (dB < 0) dB = 0 - dB;\n    if (dA < 0) dA = 0 - dA;\n\n    return this._kR * dR + this._kG * dG + this._kB * dB + this._kA * dA;\n  }\n}\n\nexport class Manhattan extends AbstractManhattan {\n  protected _setDefaults() {\n    this._kR = 1;\n    this._kG = 1;\n    this._kB = 1;\n    this._kA = 1;\n  }\n}\n\n/**\n * Manhattan distance (Nommyde modification)\n * https://github.com/igor-bezkrovny/image-quantization/issues/4#issuecomment-235155320\n */\nexport class ManhattanNommyde extends AbstractManhattan {\n  protected _setDefaults() {\n    this._kR = 0.4984;\n    this._kG = 0.8625;\n    this._kB = 0.2979;\n    // TODO: what is the best coefficient below?\n    this._kA = 1;\n  }\n}\n\n/**\n * Manhattan distance (sRGB coefficients)\n */\nexport class ManhattanBT709 extends AbstractManhattan {\n  protected _setDefaults() {\n    this._kR = Y.RED;\n    this._kG = Y.GREEN;\n    this._kB = Y.BLUE;\n    // TODO: what is the best coefficient below?\n    this._kA = 1;\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * pngQuant.ts - part of Image Quantization Library\n */\nimport { AbstractDistanceCalculator } from './distanceCalculator';\n\n/**\n * TODO: check quality of this distance equation\n * TODO: ask author for usage rights\n * taken from:\n * {@link http://stackoverflow.com/questions/4754506/color-similarity-distance-in-rgba-color-space/8796867#8796867}\n * {@link https://github.com/pornel/pngquant/blob/cc39b47799a7ff2ef17b529f9415ff6e6b213b8f/lib/pam.h#L148}\n */\nexport class PNGQuant extends AbstractDistanceCalculator {\n  /**\n   * Author's comments\n   * px_b.rgb = px.rgb + 0*(1-px.a) // blend px on black\n   * px_b.a   = px.a   + 1*(1-px.a)\n   * px_w.rgb = px.rgb + 1*(1-px.a) // blend px on white\n   * px_w.a   = px.a   + 1*(1-px.a)\n   *\n   * px_b.rgb = px.rgb              // difference same as in opaque RGB\n   * px_b.a   = 1\n   * px_w.rgb = px.rgb - px.a       // difference simplifies to formula below\n   * px_w.a   = 1\n   *\n   * (px.rgb - px.a) - (py.rgb - py.a)\n   * (px.rgb - py.rgb) + (py.a - px.a)\n   *\n   */\n  calculateRaw(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number) {\n    const alphas = (a2 - a1) * this._whitePoint.a;\n    return this._colordifferenceCh(r1 * this._whitePoint.r, r2 * this._whitePoint.r, alphas) +\n      this._colordifferenceCh(g1 * this._whitePoint.g, g2 * this._whitePoint.g, alphas) +\n      this._colordifferenceCh(b1 * this._whitePoint.b, b2 * this._whitePoint.b, alphas);\n  }\n\n  private _colordifferenceCh(x: number, y: number, alphas: number) {\n    // maximum of channel blended on white, and blended on black\n    // premultiplied alpha and backgrounds 0/1 shorten the formula\n    const black = x - y;\n    const white = black + alphas;\n\n    return black * black + white * white;\n  }\n\n  protected _setDefaults() {}\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * iq.ts - Image Quantization Library\n */\nexport { AbstractDistanceCalculator } from './distanceCalculator';\nexport { CIE94Textiles, CIE94GraphicArts } from './cie94';\nexport { CIEDE2000 } from './ciede2000';\nexport { CMetric } from './cmetric';\nexport { AbstractEuclidean, Euclidean, EuclideanBT709NoAlpha, EuclideanBT709 } from './euclidean';\nexport { AbstractManhattan, Manhattan, ManhattanBT709, ManhattanNommyde } from './manhattan';\nexport { PNGQuant } from './pngQuant';\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * common.ts - part of Image Quantization Library\n */\nimport { PointContainer } from '../utils/pointContainer';\nimport { Palette } from '../utils/palette';\nimport { PaletteQuantizerYieldValue } from './paletteQuantizerYieldValue';\n\nexport abstract class AbstractPaletteQuantizer {\n  abstract sample(pointContainer: PointContainer): void;\n  abstract quantize(): IterableIterator<PaletteQuantizerYieldValue>;\n\n  quantizeSync() {\n    for (const value of this.quantize()) {\n      if (value.palette) {\n        return value.palette;\n      }\n    }\n\n    throw new Error('unreachable');\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * point.ts - part of Image Quantization Library\n */\nimport { Y } from '../constants/bt709';\n\nexport interface PointRGBA {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\n/**\n * v8 optimized class\n * 1) \"constructor\" should have initialization with worst types\n * 2) \"set\" should have |0 / >>> 0\n */\nexport class Point implements PointRGBA {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n  uint32: number;\n  rgba: number[]; // TODO: better name is quadruplet or quad may be?\n  // Lab : { L : number; a : number; b : number };\n\n  static createByQuadruplet(quadruplet: number[]) {\n    const point = new Point();\n\n    point.r = quadruplet[ 0 ] | 0;\n    point.g = quadruplet[ 1 ] | 0;\n    point.b = quadruplet[ 2 ] | 0;\n    point.a = quadruplet[ 3 ] | 0;\n    point._loadUINT32();\n    point._loadQuadruplet();\n    // point._loadLab();\n    return point;\n  }\n\n  static createByRGBA(red: number, green: number, blue: number, alpha: number) {\n    const point = new Point();\n\n    point.r = red | 0;\n    point.g = green | 0;\n    point.b = blue | 0;\n    point.a = alpha | 0;\n    point._loadUINT32();\n    point._loadQuadruplet();\n    // point._loadLab();\n    return point;\n  }\n\n  static createByUint32(uint32: number) {\n    const point = new Point();\n\n    point.uint32 = uint32 >>> 0;\n    point._loadRGBA();\n    point._loadQuadruplet();\n    // point._loadLab();\n    return point;\n  }\n\n  constructor() {\n    this.uint32 = -1 >>> 0;\n    this.r = this.g = this.b = this.a = 0;\n    this.rgba = new Array(4);\n    this.rgba[ 0 ] = 0;\n    this.rgba[ 1 ] = 0;\n    this.rgba[ 2 ] = 0;\n    this.rgba[ 3 ] = 0;\n    /*\n     this.Lab = {\n     L : 0.0,\n     a : 0.0,\n     b : 0.0\n     };\n     */\n  }\n\n  from(point: Point) {\n    this.r = point.r;\n    this.g = point.g;\n    this.b = point.b;\n    this.a = point.a;\n    this.uint32 = point.uint32;\n    this.rgba[ 0 ] = point.r;\n    this.rgba[ 1 ] = point.g;\n    this.rgba[ 2 ] = point.b;\n    this.rgba[ 3 ] = point.a;\n\n    /*\n     this.Lab.L = point.Lab.L;\n     this.Lab.a = point.Lab.a;\n     this.Lab.b = point.Lab.b;\n     */\n  }\n\n  /*\n   * TODO:\n   Luminance from RGB:\n\n   Luminance (standard for certain colour spaces): (0.2126*R + 0.7152*G + 0.0722*B) [1]\n   Luminance (perceived option 1): (0.299*R + 0.587*G + 0.114*B) [2]\n   Luminance (perceived option 2, slower to calculate):  sqrt( 0.241*R^2 + 0.691*G^2 + 0.068*B^2 ) ? sqrt( 0.299*R^2 + 0.587*G^2 + 0.114*B^2 ) (thanks to @MatthewHerbst) [http://alienryderflex.com/hsp.html]\n   */\n  getLuminosity(useAlphaChannel: boolean) {\n    let r = this.r;\n    let g = this.g;\n    let b = this.b;\n\n    if (useAlphaChannel) {\n      r = Math.min(255, 255 - this.a + this.a * r / 255);\n      g = Math.min(255, 255 - this.a + this.a * g / 255);\n      b = Math.min(255, 255 - this.a + this.a * b / 255);\n    }\n\n    // var luma = this.r * Point._RED_COEFFICIENT + this.g * Point._GREEN_COEFFICIENT + this.b * Point._BLUE_COEFFICIENT;\n\n    /*\n     if(useAlphaChannel) {\n     luma = (luma * (255 - this.a)) / 255;\n     }\n     */\n\n    return r * Y.RED + g * Y.GREEN + b * Y.BLUE;\n  }\n\n  private _loadUINT32() {\n    this.uint32 = (this.a << 24 | this.b << 16 | this.g << 8 | this.r) >>> 0;\n  }\n\n  private _loadRGBA() {\n    this.r = this.uint32 & 0xff;\n    this.g = (this.uint32 >>> 8) & 0xff;\n    this.b = (this.uint32 >>> 16) & 0xff;\n    this.a = (this.uint32 >>> 24) & 0xff;\n  }\n\n  private _loadQuadruplet() {\n    this.rgba[ 0 ] = this.r;\n    this.rgba[ 1 ] = this.g;\n    this.rgba[ 2 ] = this.b;\n    this.rgba[ 3 ] = this.a;\n\n    /*\n     var xyz = rgb2xyz(this.r, this.g, this.b);\n     var lab = xyz2lab(xyz.x, xyz.y, xyz.z);\n     this.lab.l = lab.l;\n     this.lab.a = lab.a;\n     this.lab.b = lab.b;\n     */\n  }\n\n  /*\n   private _loadLab() : void {\n   var Lab = Color.Conversion.rgb2lab(this.r, this.g, this.b);\n   this.Lab.L = Lab.L;\n   this.Lab.a = Lab.a;\n   this.Lab.b = Lab.b;\n   }\n   */\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * pointContainer.ts - part of Image Quantization Library\n */\nimport { Point } from './point';\n\n/**\n * v8 optimizations done.\n * fromXXX methods are static to move out polymorphic code from class instance itself.\n */\nexport class PointContainer {\n  private readonly _pointArray: Point[];\n  private _width: number;\n  private _height: number;\n\n  constructor() {\n    this._width = 0;\n    this._height = 0;\n    this._pointArray = [];\n  }\n\n  getWidth() {\n    return this._width;\n  }\n\n  getHeight() {\n    return this._height;\n  }\n\n  setWidth(width: number) {\n    this._width = width;\n  }\n\n  setHeight(height: number) {\n    this._height = height;\n  }\n\n  getPointArray() {\n    return this._pointArray;\n  }\n\n  clone() {\n    const clone = new PointContainer();\n    clone._width = this._width;\n    clone._height = this._height;\n\n    for (let i = 0, l = this._pointArray.length; i < l; i++) {\n      clone._pointArray[i] = Point.createByUint32(this._pointArray[i].uint32 | 0); // \"| 0\" is added for v8 optimization\n    }\n\n    return clone;\n  }\n\n  toUint32Array() {\n    const l = this._pointArray.length;\n    const uint32Array = new Uint32Array(l);\n\n    for (let i = 0; i < l; i++) {\n      uint32Array[i] = this._pointArray[i].uint32;\n    }\n\n    return uint32Array;\n  }\n\n  toUint8Array() {\n    return new Uint8Array(this.toUint32Array().buffer);\n  }\n\n  static fromHTMLImageElement(img: HTMLImageElement) {\n    const width = img.naturalWidth;\n    const height = img.naturalHeight;\n\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n\n    const ctx = canvas.getContext('2d')!; // tslint:disable-line:no-non-null-assertion\n    ctx.drawImage(img, 0, 0, width, height, 0, 0, width, height);\n\n    return PointContainer.fromHTMLCanvasElement(canvas);\n  }\n\n  static fromHTMLCanvasElement(canvas: HTMLCanvasElement) {\n    const width = canvas.width;\n    const height = canvas.height;\n\n    const ctx = canvas.getContext('2d')!; // tslint:disable-line:no-non-null-assertion\n    const imgData = ctx.getImageData(0, 0, width, height);\n\n    return PointContainer.fromImageData(imgData);\n  }\n\n  static fromImageData(imageData: ImageData) {\n    const width = imageData.width;\n    const height = imageData.height;\n\n    return PointContainer.fromUint8Array(imageData.data, width, height);\n  }\n\n  static fromUint8Array(uint8Array: number[] | Uint8Array | Uint8ClampedArray, width: number, height: number) {\n    switch (Object.prototype.toString.call(uint8Array)) {\n      case '[object Uint8ClampedArray]':\n      case '[object Uint8Array]':\n        break;\n\n      default:\n        uint8Array = new Uint8Array(uint8Array);\n    }\n\n    const uint32Array = new Uint32Array((uint8Array as Uint8Array).buffer);\n    return PointContainer.fromUint32Array(uint32Array, width, height);\n  }\n\n  static fromUint32Array(uint32Array: Uint32Array, width: number, height: number) {\n    const container = new PointContainer();\n\n    container._width = width;\n    container._height = height;\n\n    for (let i = 0, l = uint32Array.length; i < l; i++) {\n      container._pointArray[i] = Point.createByUint32(uint32Array[i] | 0); // \"| 0\" is added for v8 optimization\n    }\n\n    return container;\n  }\n\n  static fromBuffer(buffer: Buffer, width: number, height: number) {\n    const uint32Array = new Uint32Array(buffer.buffer, buffer.byteOffset, buffer.byteLength / Uint32Array.BYTES_PER_ELEMENT);\n    return PointContainer.fromUint32Array(uint32Array, width, height);\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * palette.ts - part of Image Quantization Library\n */\n\nimport { Point } from './point';\nimport { PointContainer } from './pointContainer';\nimport { AbstractDistanceCalculator } from '../distance/distanceCalculator';\nimport { rgb2hsl } from '../conversion/rgb2hsl';\n\n// TODO: make paletteArray via pointContainer, so, export will be available via pointContainer.exportXXX\n\nconst hueGroups = 10;\n\nexport function hueGroup(hue: number, segmentsNumber: number) {\n  const maxHue = 360;\n  const seg = maxHue / segmentsNumber;\n  const half = seg / 2;\n\n  for (let i = 1, mid = seg - half; i < segmentsNumber; i++, mid += seg) {\n    if (hue >= mid && hue < mid + seg) return i;\n  }\n  return 0;\n}\n\nexport class Palette {\n  private readonly _pointContainer: PointContainer;\n  private readonly _pointArray: Point[] = [];\n  private _i32idx: { [ key: string ]: number } = {};\n\n  constructor() {\n    this._pointContainer = new PointContainer();\n    this._pointContainer.setHeight(1);\n    this._pointArray = this._pointContainer.getPointArray();\n  }\n\n  add(color: Point) {\n    this._pointArray.push(color);\n    this._pointContainer.setWidth(this._pointArray.length);\n  }\n\n  has(color: Point) {\n    for (let i = this._pointArray.length - 1; i >= 0; i--) {\n      if (color.uint32 === this._pointArray[ i ].uint32) return true;\n    }\n\n    return false;\n  }\n\n  // TOTRY: use HUSL - http://boronine.com/husl/ http://www.husl-colors.org/ https://github.com/husl-colors/husl\n  getNearestColor(colorDistanceCalculator: AbstractDistanceCalculator, color: Point) {\n    return this._pointArray[ this._getNearestIndex(colorDistanceCalculator, color) | 0 ];\n  }\n\n  getPointContainer() {\n    return this._pointContainer;\n  }\n\n  // TOTRY: use HUSL - http://boronine.com/husl/\n  /*\n   public nearestIndexByUint32(i32) {\n   var idx : number = this._nearestPointFromCache(\"\" + i32);\n   if (idx >= 0) return idx;\n\n   var min = 1000,\n   rgb = [\n   (i32 & 0xff),\n   (i32 >>> 8) & 0xff,\n   (i32 >>> 16) & 0xff,\n   (i32 >>> 24) & 0xff\n   ],\n   len = this._pointArray.length;\n\n   idx = 0;\n   for (var i = 0; i < len; i++) {\n   var dist = Utils.distEuclidean(rgb, this._pointArray[i].rgba);\n\n   if (dist < min) {\n   min = dist;\n   idx = i;\n   }\n   }\n\n   this._i32idx[i32] = idx;\n   return idx;\n   }\n   */\n\n  private _nearestPointFromCache(key: string) {\n    return typeof this._i32idx[ key ] === 'number' ? this._i32idx[ key ] : -1;\n  }\n\n  private _getNearestIndex(colorDistanceCalculator: AbstractDistanceCalculator, point: Point) {\n    let idx = this._nearestPointFromCache('' + point.uint32);\n    if (idx >= 0) return idx;\n\n    let minimalDistance = Number.MAX_VALUE;\n\n    idx = 0;\n    for (let i = 0, l = this._pointArray.length; i < l; i++) {\n      const p = this._pointArray[ i ];\n      const distance = colorDistanceCalculator.calculateRaw(point.r, point.g, point.b, point.a, p.r, p.g, p.b, p.a);\n\n      if (distance < minimalDistance) {\n        minimalDistance = distance;\n        idx = i;\n      }\n    }\n\n    this._i32idx[ point.uint32 ] = idx;\n    return idx;\n  }\n\n  /*\n   public reduce(histogram : ColorHistogram, colors : number) {\n   if (this._pointArray.length > colors) {\n   var idxi32 = histogram.getImportanceSortedColorsIDXI32();\n\n   // quantize histogram to existing palette\n   var keep = [], uniqueColors = 0, idx, pruned = false;\n\n   for (var i = 0, len = idxi32.length; i < len; i++) {\n   // palette length reached, unset all remaining colors (sparse palette)\n   if (uniqueColors >= colors) {\n   this.prunePal(keep);\n   pruned = true;\n   break;\n   } else {\n   idx = this.nearestIndexByUint32(idxi32[i]);\n   if (keep.indexOf(idx) < 0) {\n   keep.push(idx);\n   uniqueColors++;\n   }\n   }\n   }\n\n   if (!pruned) {\n   this.prunePal(keep);\n   }\n   }\n   }\n\n   // TODO: check usage, not tested!\n   public prunePal(keep : number[]) {\n   var colors = this._pointArray.length;\n   for (var colorIndex = colors - 1; colorIndex >= 0; colorIndex--) {\n   if (keep.indexOf(colorIndex) < 0) {\n\n   if(colorIndex + 1 < colors) {\n   this._pointArray[ colorIndex ] = this._pointArray [ colors - 1 ];\n   }\n   --colors;\n   //this._pointArray[colorIndex] = null;\n   }\n   }\n   console.log(\"colors pruned: \" + (this._pointArray.length - colors));\n   this._pointArray.length = colors;\n   this._i32idx = {};\n   }\n   */\n\n  // TODO: group very low lum and very high lum colors\n  // TODO: pass custom sort order\n  // TODO: sort criteria function should be placed to HueStats class\n  sort() {\n    this._i32idx = {};\n    this._pointArray.sort((a: Point, b: Point) => {\n      const hslA = rgb2hsl(a.r, a.g, a.b);\n      const hslB = rgb2hsl(b.r, b.g, b.b);\n\n      // sort all grays + whites together\n      const hueA = (a.r === a.g && a.g === a.b) ? 0 : 1 + hueGroup(hslA.h, hueGroups);\n      const hueB = (b.r === b.g && b.g === b.b) ? 0 : 1 + hueGroup(hslB.h, hueGroups);\n      /*\n       var hueA = (a.r === a.g && a.g === a.b) ? 0 : 1 + Utils.hueGroup(hslA.h, hueGroups);\n       var hueB = (b.r === b.g && b.g === b.b) ? 0 : 1 + Utils.hueGroup(hslB.h, hueGroups);\n       */\n\n      const hueDiff = hueB - hueA;\n      if (hueDiff) return -hueDiff;\n\n      /*\n       var lumDiff = Utils.lumGroup(+hslB.l.toFixed(2)) - Utils.lumGroup(+hslA.l.toFixed(2));\n       if (lumDiff) return -lumDiff;\n       */\n      const lA = a.getLuminosity(true);\n      const lB = b.getLuminosity(true);\n\n      if (lB - lA !== 0) return lB - lA;\n\n      const satDiff = ((hslB.s * 100) | 0) - ((hslA.s * 100) | 0);\n      if (satDiff) return -satDiff;\n\n      return 0;\n    });\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * hueStatistics.ts - part of Image Quantization Library\n */\nimport { rgb2hsl } from '../conversion/rgb2hsl';\nimport { hueGroup } from './palette';\n\nclass HueGroup {\n  num = 0;\n  cols: number[] = [];\n}\n\nexport class HueStatistics {\n  private _numGroups: number;\n  private _minCols: number;\n  private _stats: HueGroup[];\n  private _groupsFull: number;\n\n  constructor(numGroups: number, minCols: number) {\n    this._numGroups = numGroups;\n    this._minCols = minCols;\n    this._stats = [];\n\n    for (let i = 0; i <= numGroups; i++) {\n      this._stats[ i ] = new HueGroup();\n    }\n\n    this._groupsFull = 0;\n  }\n\n  check(i32: number) {\n    if (this._groupsFull === this._numGroups + 1) {\n      this.check = function () {\n      };\n    }\n\n    const r = (i32 & 0xff);\n    const g = (i32 >>> 8) & 0xff;\n    const b = (i32 >>> 16) & 0xff;\n    const hg = (r === g && g === b) ? 0 : 1 + hueGroup(rgb2hsl(r, g, b).h, this._numGroups);\n    const gr = this._stats[ hg ];\n    const min = this._minCols;\n\n    gr.num++;\n\n    if (gr.num > min) {\n      return;\n    }\n    if (gr.num === min) {\n      this._groupsFull++;\n    }\n\n    if (gr.num <= min) {\n      this._stats[ hg ].cols.push(i32);\n    }\n  }\n\n  injectIntoDictionary(histG: { [key: string ]: number }) {\n    for (let i = 0; i <= this._numGroups; i++) {\n      if (this._stats[ i ].num <= this._minCols) {\n        this._stats[ i ].cols.forEach((col: number) => {\n          if (!histG[ col ]) {\n            histG[ col ] = 1;\n          } else {\n            histG[ col ]++;\n          }\n        });\n      }\n    }\n  }\n\n  injectIntoArray(histG: string[]) {\n    for (let i = 0; i <= this._numGroups; i++) {\n      if (this._stats[ i ].num <= this._minCols) {\n        this._stats[ i ].cols.forEach((col: any) => { // tslint:disable-line:no-any\n          if (histG.indexOf(col) === -1) {\n            histG.push(col);\n          }\n        });\n      }\n    }\n  }\n}\n","export class ProgressTracker {\n  static readonly steps = 100;\n\n  progress: number;\n\n  private _step: number;\n  private _range: number;\n  private _last: number;\n  private _progressRange: number;\n\n  constructor(valueRange: number, progressRange: number) {\n    this._range = valueRange;\n    this._progressRange = progressRange;\n    this._step = Math.max(1, this._range / (ProgressTracker.steps + 1) | 0);\n    this._last = -this._step;\n    this.progress = 0;\n  }\n\n  shouldNotify(current: number) {\n    if (current - this._last >= this._step) {\n      this._last = current;\n      this.progress = Math.min(this._progressRange * this._last / this._range, this._progressRange);\n      return true;\n    }\n\n    return false;\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * iq.ts - Image Quantization Library\n */\nimport * as arithmetic from './arithmetic';\nimport { HueStatistics } from './hueStatistics';\nimport { Palette } from './palette';\nimport { Point } from './point';\nimport { PointContainer } from './pointContainer';\nimport { ProgressTracker } from './progressTracker';\n\nexport {\n  Point,\n  PointContainer,\n  Palette,\n  HueStatistics,\n  ProgressTracker,\n  arithmetic,\n};\n","/*\n * NeuQuant Neural-Net Quantization Algorithm\n * ------------------------------------------\n *\n * Copyright (c) 1994 Anthony Dekker\n *\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\n * \"Kohonen neural networks for optimal colour quantization\" in \"Network:\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\n * the algorithm.\n *\n * Any party obtaining a copy of these files from the author, directly or\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\n * this software and documentation files (the \"Software\"), including without\n * limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons who\n * receive copies from any such party to do so, with the only requirement being\n * that this copyright notice remain intact.\n */\n\n/**\n * @preserve TypeScript port:\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * neuquant.ts - part of Image Quantization Library\n */\n\nimport { Palette } from '../../utils/palette';\nimport { Point } from '../../utils/point';\nimport { PointContainer } from '../../utils/pointContainer';\nimport { AbstractDistanceCalculator } from '../../distance/distanceCalculator';\nimport { AbstractPaletteQuantizer } from '../paletteQuantizer';\nimport { PaletteQuantizerYieldValue } from '../paletteQuantizerYieldValue';\nimport { ProgressTracker } from '../../utils';\n\n// bias for colour values\nconst networkBiasShift = 3;\n\nclass Neuron {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n\n  constructor(defaultValue: number) {\n    this.r = this.g = this.b = this.a = defaultValue;\n  }\n\n  /**\n   * There is a fix in original NEUQUANT by Anthony Dekker (http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)\n   * @example\n   * r = Math.min(255, (neuron.r + (1 << (networkBiasShift - 1))) >> networkBiasShift);\n   */\n  toPoint() {\n    return Point.createByRGBA(this.r >> networkBiasShift, this.g >> networkBiasShift, this.b >> networkBiasShift, this.a >> networkBiasShift);\n  }\n\n  subtract(r: number, g: number, b: number, a: number) {\n    this.r -= r | 0;\n    this.g -= g | 0;\n    this.b -= b | 0;\n    this.a -= a | 0;\n  }\n\n  /*\n   public subtract(r : number, g : number, b : number, a : number) : void {\n   this.r = (-r + this.r) | 0;\n   this.g = (-g + this.g) | 0;\n   this.b = (-b + this.b) | 0;\n   this.a = (-a + this.a) | 0;\n\n   this.r -= r;\n   this.g -= g;\n   this.b -= b;\n   this.a -= a;\n\n   this.r -= r | 0;\n   this.g -= g | 0;\n   this.b -= b | 0;\n   this.a -= a | 0;\n   }\n   */\n}\n\nexport class NeuQuant extends AbstractPaletteQuantizer {\n  /*\n   four primes near 500 - assume no image has a length so large\n   that it is divisible by all four primes\n   */\n  private static readonly _prime1: number = 499;\n  private static readonly _prime2: number = 491;\n  private static readonly _prime3: number = 487;\n  private static readonly _prime4: number = 503;\n  private static readonly _minpicturebytes: number = NeuQuant._prime4;\n\n  // no. of learning cycles\n  private static readonly _nCycles: number = 100;\n\n  // defs for freq and bias\n  private static readonly _initialBiasShift: number = 16;\n\n  // bias for fractions\n  private static readonly _initialBias: number = (1 << NeuQuant._initialBiasShift);\n  private static readonly _gammaShift: number = 10;\n\n  // gamma = 1024\n  // TODO: why gamma is never used?\n  // private static _gamma : number     = (1 << NeuQuant._gammaShift);\n  private static readonly _betaShift: number = 10;\n  private static readonly _beta: number = (NeuQuant._initialBias >> NeuQuant._betaShift);\n\n  // beta = 1/1024\n  private static readonly _betaGamma: number = (NeuQuant._initialBias << (NeuQuant._gammaShift - NeuQuant._betaShift));\n\n  /*\n   * for 256 cols, radius starts\n   */\n  private static readonly _radiusBiasShift: number = 6;\n\n  // at 32.0 biased by 6 bits\n  private static readonly _radiusBias: number = 1 << NeuQuant._radiusBiasShift;\n\n  // and decreases by a factor of 1/30 each cycle\n  private static readonly _radiusDecrease: number = 30;\n\n  /* defs for decreasing alpha factor */\n\n  // alpha starts at 1.0\n  private static readonly _alphaBiasShift: number = 10;\n\n  // biased by 10 bits\n  private static readonly _initAlpha: number = (1 << NeuQuant._alphaBiasShift);\n\n  /* radBias and alphaRadBias used for radpower calculation */\n  private static readonly _radBiasShift: number = 8;\n  private static readonly _radBias: number = 1 << NeuQuant._radBiasShift;\n  private static readonly _alphaRadBiasShift: number = NeuQuant._alphaBiasShift + NeuQuant._radBiasShift;\n  private static readonly _alphaRadBias: number = 1 << NeuQuant._alphaRadBiasShift;\n\n  private _pointArray: Point[];\n  private readonly _networkSize: number;\n  private _network!: Neuron[];\n\n  /** sampling factor 1..30 */\n  private readonly _sampleFactor!: number;\n  private _radPower!: number[];\n\n  // bias and freq arrays for learning\n  private _freq!: number[];\n\n  /* for network lookup - really 256 */\n  private _bias!: number[];\n  private readonly _distance: AbstractDistanceCalculator;\n\n  constructor(colorDistanceCalculator: AbstractDistanceCalculator, colors = 256) {\n    super();\n    this._distance = colorDistanceCalculator;\n    this._pointArray = [];\n    this._sampleFactor = 1;\n    this._networkSize = colors;\n\n    this._distance.setWhitePoint(255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift);\n  }\n\n  sample(pointContainer: PointContainer) {\n    this._pointArray = this._pointArray.concat(pointContainer.getPointArray());\n  }\n\n  * quantize(): IterableIterator<PaletteQuantizerYieldValue> {\n    this._init();\n\n    yield * this._learn();\n\n    yield {\n      palette: this._buildPalette(),\n      progress: 100,\n    };\n  }\n\n  private _init() {\n    this._freq = [];\n    this._bias = [];\n    this._radPower = [];\n    this._network = [];\n    for (let i = 0; i < this._networkSize; i++) {\n      this._network[ i ] = new Neuron((i << (networkBiasShift + 8)) / this._networkSize | 0);\n\n      // 1/this._networkSize\n      this._freq[ i ] = NeuQuant._initialBias / this._networkSize | 0;\n      this._bias[ i ] = 0;\n    }\n  }\n\n  /**\n   * Main Learning Loop\n   */\n  private * _learn() {\n    let sampleFactor = this._sampleFactor;\n    const pointsNumber = this._pointArray.length;\n    if (pointsNumber < NeuQuant._minpicturebytes) sampleFactor = 1;\n\n    const alphadec = 30 + (sampleFactor - 1) / 3 | 0;\n    const pointsToSample = pointsNumber / sampleFactor | 0;\n\n    let delta = pointsToSample / NeuQuant._nCycles | 0;\n    let alpha = NeuQuant._initAlpha;\n    let radius = (this._networkSize >> 3) * NeuQuant._radiusBias;\n\n    let rad = radius >> NeuQuant._radiusBiasShift;\n    if (rad <= 1) rad = 0;\n\n    for (let i = 0; i < rad; i++) {\n      this._radPower[ i ] = alpha * (((rad * rad - i * i) * NeuQuant._radBias) / (rad * rad)) >>> 0;\n    }\n\n    let step: number;\n    if (pointsNumber < NeuQuant._minpicturebytes) {\n      step = 1;\n    } else if (pointsNumber % NeuQuant._prime1 !== 0) {\n      step = NeuQuant._prime1;\n    } else if ((pointsNumber % NeuQuant._prime2) !== 0) {\n      step = NeuQuant._prime2;\n    } else if ((pointsNumber % NeuQuant._prime3) !== 0) {\n      step = NeuQuant._prime3;\n    } else {\n      step = NeuQuant._prime4;\n    }\n\n    const tracker = new ProgressTracker(pointsToSample, 99);\n    for (let i = 0, pointIndex = 0; i < pointsToSample;) {\n      if (tracker.shouldNotify(i)) {\n        yield {\n          progress: tracker.progress,\n        };\n      }\n\n      const point = this._pointArray[ pointIndex ];\n      const b = point.b << networkBiasShift;\n      const g = point.g << networkBiasShift;\n      const r = point.r << networkBiasShift;\n      const a = point.a << networkBiasShift;\n      const neuronIndex = this._contest(b, g, r, a);\n\n      this._alterSingle(alpha, neuronIndex, b, g, r, a);\n      if (rad !== 0) this._alterNeighbour(rad, neuronIndex, b, g, r, a);\n\n      /* alter neighbours */\n      pointIndex += step;\n      if (pointIndex >= pointsNumber) pointIndex -= pointsNumber;\n      i++;\n\n      if (delta === 0) delta = 1;\n\n      if (i % delta === 0) {\n        alpha -= (alpha / alphadec) | 0;\n        radius -= (radius / NeuQuant._radiusDecrease) | 0;\n        rad = radius >> NeuQuant._radiusBiasShift;\n\n        if (rad <= 1) rad = 0;\n        for (let j = 0; j < rad; j++) this._radPower[ j ] = alpha * (((rad * rad - j * j) * NeuQuant._radBias) / (rad * rad)) >>> 0;\n      }\n    }\n  }\n\n  private _buildPalette() {\n    const palette = new Palette();\n\n    this._network.forEach(neuron => {\n      palette.add(neuron.toPoint());\n    });\n\n    palette.sort();\n    return palette;\n  }\n\n  /**\n   * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in radpower[|i-j|]\n   */\n  private _alterNeighbour(rad: number, i: number, b: number, g: number, r: number, al: number) {\n    let lo = i - rad;\n    if (lo < -1) lo = -1;\n\n    let hi = i + rad;\n    if (hi > this._networkSize) hi = this._networkSize;\n\n    let j = i + 1;\n    let k = i - 1;\n    let m = 1;\n\n    while (j < hi || k > lo) {\n      const a = this._radPower[ m++ ] / NeuQuant._alphaRadBias;\n      if (j < hi) {\n        const p = this._network[ j++ ];\n        p.subtract(\n          a * (p.r - r),\n          a * (p.g - g),\n          a * (p.b - b),\n          a * (p.a - al),\n        );\n      }\n\n      if (k > lo) {\n        const p = this._network[ k-- ];\n        p.subtract(\n          a * (p.r - r),\n          a * (p.g - g),\n          a * (p.b - b),\n          a * (p.a - al),\n        );\n      }\n    }\n  }\n\n  /**\n   * Move neuron i towards biased (b,g,r) by factor alpha\n   */\n  private _alterSingle(alpha: number, i: number, b: number, g: number, r: number, a: number) {\n    alpha /= NeuQuant._initAlpha;\n\n    /* alter hit neuron */\n    const n = this._network[ i ];\n    n.subtract(\n      alpha * (n.r - r),\n      alpha * (n.g - g),\n      alpha * (n.b - b),\n      alpha * (n.a - a),\n    );\n  }\n\n  /**\n   * Search for biased BGR values\n   * description:\n   *    finds closest neuron (min dist) and updates freq\n   *    finds best neuron (min dist-bias) and returns position\n   *    for frequently chosen neurons, freq[i] is high and bias[i] is negative\n   *    bias[i] = _gamma*((1/this._networkSize)-freq[i])\n   *\n   * Original distance equation:\n   *        dist = abs(dR) + abs(dG) + abs(dB)\n   */\n  private _contest(b: number, g: number, r: number, a: number) {\n    const multiplier = (255 * 4) << networkBiasShift;\n\n    let bestd = ~(1 << 31);\n    let bestbiasd = bestd;\n    let bestpos = -1;\n    let bestbiaspos = bestpos;\n\n    for (let i = 0; i < this._networkSize; i++) {\n      const n = this._network[ i ];\n      const dist = this._distance.calculateNormalized(n, { r, g, b, a }) * multiplier | 0;\n\n      if (dist < bestd) {\n        bestd = dist;\n        bestpos = i;\n      }\n\n      const biasdist = dist - ((this._bias[ i ]) >> (NeuQuant._initialBiasShift - networkBiasShift));\n      if (biasdist < bestbiasd) {\n        bestbiasd = biasdist;\n        bestbiaspos = i;\n      }\n      const betafreq = (this._freq[ i ] >> NeuQuant._betaShift);\n      this._freq[ i ] -= betafreq;\n      this._bias[ i ] += (betafreq << NeuQuant._gammaShift);\n    }\n    this._freq[ bestpos ] += NeuQuant._beta;\n    this._bias[ bestpos ] -= NeuQuant._betaGamma;\n    return bestbiaspos;\n  }\n}\n","/*\n * NeuQuantFloat Neural-Net Quantization Algorithm\n * ------------------------------------------\n *\n * Copyright (c) 1994 Anthony Dekker\n *\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\n * \"Kohonen neural networks for optimal colour quantization\" in \"Network:\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\n * the algorithm.\n *\n * Any party obtaining a copy of these files from the author, directly or\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\n * this software and documentation files (the \"Software\"), including without\n * limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons who\n * receive copies from any such party to do so, with the only requirement being\n * that this copyright notice remain intact.\n */\n/**\n * @preserve TypeScript port:\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * neuquant.ts - part of Image Quantization Library\n */\nimport { Palette } from '../../utils/palette';\nimport { Point } from '../../utils/point';\nimport { PointContainer } from '../../utils/pointContainer';\nimport { AbstractDistanceCalculator } from '../../distance/distanceCalculator';\nimport { AbstractPaletteQuantizer } from '../paletteQuantizer';\nimport { PaletteQuantizerYieldValue } from '../paletteQuantizerYieldValue';\nimport { ProgressTracker } from '../../utils';\n\n// bias for colour values\nconst networkBiasShift = 3;\n\nclass NeuronFloat {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n\n  constructor(defaultValue: number) {\n    this.r = this.g = this.b = this.a = defaultValue;\n  }\n\n  /**\n   * There is a fix in original NEUQUANT by Anthony Dekker (http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)\n   * @example\n   * r = Math.min(255, (neuron.r + (1 << (networkBiasShift - 1))) >> networkBiasShift);\n   */\n  toPoint() {\n    return Point.createByRGBA(this.r >> networkBiasShift, this.g >> networkBiasShift, this.b >> networkBiasShift, this.a >> networkBiasShift);\n  }\n\n  subtract(r: number, g: number, b: number, a: number) {\n    this.r -= r;\n    this.g -= g;\n    this.b -= b;\n    this.a -= a;\n  }\n}\n\nexport class NeuQuantFloat extends AbstractPaletteQuantizer {\n  /*\n   four primes near 500 - assume no image has a length so large\n   that it is divisible by all four primes\n   */\n  private static readonly _prime1: number = 499;\n  private static readonly _prime2: number = 491;\n  private static readonly _prime3: number = 487;\n  private static readonly _prime4: number = 503;\n  private static readonly _minpicturebytes: number = NeuQuantFloat._prime4;\n\n  // no. of learning cycles\n  private static readonly _nCycles: number = 100;\n\n  // defs for freq and bias\n  private static readonly _initialBiasShift: number = 16;\n\n  // bias for fractions\n  private static readonly _initialBias: number = (1 << NeuQuantFloat._initialBiasShift);\n  private static readonly _gammaShift: number = 10;\n\n  // gamma = 1024\n  // TODO: why gamma is never used?\n  // private static _gamma : number     = (1 << NeuQuantFloat._gammaShift);\n  private static readonly _betaShift: number = 10;\n  private static readonly _beta: number = (NeuQuantFloat._initialBias >> NeuQuantFloat._betaShift);\n\n  // beta = 1/1024\n  private static readonly _betaGamma: number = (NeuQuantFloat._initialBias << (NeuQuantFloat._gammaShift - NeuQuantFloat._betaShift));\n\n  /*\n   * for 256 cols, radius starts\n   */\n  private static readonly _radiusBiasShift: number = 6;\n\n  // at 32.0 biased by 6 bits\n  private static readonly _radiusBias: number = 1 << NeuQuantFloat._radiusBiasShift;\n\n  // and decreases by a factor of 1/30 each cycle\n  private static readonly _radiusDecrease: number = 30;\n\n  /* defs for decreasing alpha factor */\n\n  // alpha starts at 1.0\n  private static readonly _alphaBiasShift: number = 10;\n\n  // biased by 10 bits\n  private static readonly _initAlpha: number = (1 << NeuQuantFloat._alphaBiasShift);\n\n  /* radBias and alphaRadBias used for radpower calculation */\n  private static readonly _radBiasShift: number = 8;\n  private static readonly _radBias: number = 1 << NeuQuantFloat._radBiasShift;\n  private static readonly _alphaRadBiasShift: number = NeuQuantFloat._alphaBiasShift + NeuQuantFloat._radBiasShift;\n  private static readonly _alphaRadBias: number = 1 << NeuQuantFloat._alphaRadBiasShift;\n\n  private _pointArray!: Point[];\n  private readonly _networkSize!: number;\n  private _network!: NeuronFloat[];\n\n  /** sampling factor 1..30 */\n  private readonly _sampleFactor!: number;\n  private _radPower!: number[];\n\n  // bias and freq arrays for learning\n  private _freq!: number[];\n\n  /* for network lookup - really 256 */\n  private _bias!: number[];\n  private readonly _distance: AbstractDistanceCalculator;\n\n  constructor(colorDistanceCalculator: AbstractDistanceCalculator, colors = 256) {\n    super();\n    this._distance = colorDistanceCalculator;\n    this._pointArray = [];\n    this._sampleFactor = 1;\n    this._networkSize = colors;\n\n    this._distance.setWhitePoint(255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift);\n  }\n\n  sample(pointContainer: PointContainer) {\n    this._pointArray = this._pointArray.concat(pointContainer.getPointArray());\n  }\n\n  * quantize() {\n    this._init();\n    yield * this._learn();\n\n    yield {\n      palette: this._buildPalette(),\n      progress: 100,\n    };\n  }\n\n  private _init() {\n    this._freq = [];\n    this._bias = [];\n    this._radPower = [];\n    this._network = [];\n    for (let i = 0; i < this._networkSize; i++) {\n      this._network[ i ] = new NeuronFloat((i << (networkBiasShift + 8)) / this._networkSize);\n\n      // 1/this._networkSize\n      this._freq[ i ] = NeuQuantFloat._initialBias / this._networkSize;\n      this._bias[ i ] = 0;\n    }\n  }\n\n  /**\n   * Main Learning Loop\n   */\n  private * _learn(): IterableIterator<PaletteQuantizerYieldValue> {\n    let sampleFactor = this._sampleFactor;\n\n    const pointsNumber = this._pointArray.length;\n    if (pointsNumber < NeuQuantFloat._minpicturebytes) sampleFactor = 1;\n\n    const alphadec = 30 + (sampleFactor - 1) / 3;\n    const pointsToSample = pointsNumber / sampleFactor;\n\n    let delta = pointsToSample / NeuQuantFloat._nCycles | 0;\n    let alpha = NeuQuantFloat._initAlpha;\n    let radius = (this._networkSize >> 3) * NeuQuantFloat._radiusBias;\n\n    let rad = radius >> NeuQuantFloat._radiusBiasShift;\n    if (rad <= 1) rad = 0;\n\n    for (let i = 0; i < rad; i++) {\n      this._radPower[ i ] = alpha * (((rad * rad - i * i) * NeuQuantFloat._radBias) / (rad * rad));\n    }\n\n    let step: number;\n    if (pointsNumber < NeuQuantFloat._minpicturebytes) {\n      step = 1;\n    } else if (pointsNumber % NeuQuantFloat._prime1 !== 0) {\n      step = NeuQuantFloat._prime1;\n    } else if ((pointsNumber % NeuQuantFloat._prime2) !== 0) {\n      step = NeuQuantFloat._prime2;\n    } else if ((pointsNumber % NeuQuantFloat._prime3) !== 0) {\n      step = NeuQuantFloat._prime3;\n    } else {\n      step = NeuQuantFloat._prime4;\n    }\n\n    const tracker = new ProgressTracker(pointsToSample, 99);\n    for (let i = 0, pointIndex = 0; i < pointsToSample;) {\n      if (tracker.shouldNotify(i)) {\n        yield {\n          progress: tracker.progress,\n        };\n      }\n\n      const point = this._pointArray[ pointIndex ];\n      const b = point.b << networkBiasShift;\n      const g = point.g << networkBiasShift;\n      const r = point.r << networkBiasShift;\n      const a = point.a << networkBiasShift;\n      const neuronIndex = this._contest(b, g, r, a);\n\n      this._alterSingle(alpha, neuronIndex, b, g, r, a);\n      if (rad !== 0) this._alterNeighbour(rad, neuronIndex, b, g, r, a);\n\n      /* alter neighbours */\n      pointIndex += step;\n      if (pointIndex >= pointsNumber) pointIndex -= pointsNumber;\n      i++;\n\n      if (delta === 0) delta = 1;\n\n      if (i % delta === 0) {\n        alpha -= (alpha / alphadec);\n        radius -= (radius / NeuQuantFloat._radiusDecrease);\n        rad = radius >> NeuQuantFloat._radiusBiasShift;\n\n        if (rad <= 1) rad = 0;\n        for (let j = 0; j < rad; j++) this._radPower[ j ] = alpha * (((rad * rad - j * j) * NeuQuantFloat._radBias) / (rad * rad));\n      }\n    }\n\n  }\n\n  private _buildPalette() {\n    const palette = new Palette();\n\n    this._network.forEach(neuron => {\n      palette.add(neuron.toPoint());\n    });\n\n    palette.sort();\n    return palette;\n  }\n\n  /**\n   * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in radpower[|i-j|]\n   */\n  private _alterNeighbour(rad: number, i: number, b: number, g: number, r: number, al: number) {\n    let lo = i - rad;\n    if (lo < -1) lo = -1;\n\n    let hi = i + rad;\n    if (hi > this._networkSize) hi = this._networkSize;\n\n    let j = i + 1;\n    let k = i - 1;\n    let m = 1;\n\n    while (j < hi || k > lo) {\n      const a = this._radPower[ m++ ] / NeuQuantFloat._alphaRadBias;\n      if (j < hi) {\n        const p = this._network[ j++ ];\n        p.subtract(\n          a * (p.r - r),\n          a * (p.g - g),\n          a * (p.b - b),\n          a * (p.a - al),\n        );\n      }\n\n      if (k > lo) {\n        const p = this._network[ k-- ];\n        p.subtract(\n          a * (p.r - r),\n          a * (p.g - g),\n          a * (p.b - b),\n          a * (p.a - al),\n        );\n      }\n    }\n  }\n\n  /**\n   * Move neuron i towards biased (b,g,r) by factor alpha\n   */\n  private _alterSingle(alpha: number, i: number, b: number, g: number, r: number, a: number) {\n    alpha /= NeuQuantFloat._initAlpha;\n\n    /* alter hit neuron */\n    const n = this._network[ i ];\n    n.subtract(\n      alpha * (n.r - r),\n      alpha * (n.g - g),\n      alpha * (n.b - b),\n      alpha * (n.a - a),\n    );\n  }\n\n  /**\n   * Search for biased BGR values\n   * description:\n   *    finds closest neuron (min dist) and updates freq\n   *    finds best neuron (min dist-bias) and returns position\n   *    for frequently chosen neurons, freq[i] is high and bias[i] is negative\n   *    bias[i] = _gamma*((1/this._networkSize)-freq[i])\n   *\n   * Original distance equation:\n   *        dist = abs(dR) + abs(dG) + abs(dB)\n   */\n  private _contest(b: number, g: number, r: number, al: number) {\n    const multiplier = (255 * 4) << networkBiasShift;\n\n    let bestd = ~(1 << 31);\n    let bestbiasd = bestd;\n    let bestpos = -1;\n    let bestbiaspos = bestpos;\n\n    for (let i = 0; i < this._networkSize; i++) {\n      const n = this._network[ i ];\n      const dist = this._distance.calculateNormalized(n, { r, g, b, a: al }) * multiplier;\n\n      if (dist < bestd) {\n        bestd = dist;\n        bestpos = i;\n      }\n\n      const biasdist = dist - ((this._bias[ i ]) >> (NeuQuantFloat._initialBiasShift - networkBiasShift));\n      if (biasdist < bestbiasd) {\n        bestbiasd = biasdist;\n        bestbiaspos = i;\n      }\n      const betafreq = (this._freq[ i ] >> NeuQuantFloat._betaShift);\n      this._freq[ i ] -= betafreq;\n      this._bias[ i ] += (betafreq << NeuQuantFloat._gammaShift);\n    }\n    this._freq[ bestpos ] += NeuQuantFloat._beta;\n    this._bias[ bestpos ] -= NeuQuantFloat._betaGamma;\n    return bestbiaspos;\n  }\n}\n","/*\n * Copyright (c) 2015, Leon Sorokin\n * All rights reserved. (MIT Licensed)\n *\n * ColorHistogram.js - an image quantization lib\n */\n\n/**\n * @preserve TypeScript port:\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * colorHistogram.ts - part of Image Quantization Library\n */\nimport { HueStatistics } from '../../utils/hueStatistics';\nimport { PointContainer } from '../../utils/pointContainer';\nimport { stableSort } from '../../utils/arithmetic';\n\ninterface Box {\n  x: number;\n  y: number;\n  h: number;\n  w: number;\n}\n\nexport class ColorHistogram {\n  private static _boxSize = [64, 64];\n  private static _boxPixels = 2;\n  private static _hueGroups = 10;\n\n  // 1 = by global population, 2 = subregion population threshold\n  private _method: number;\n\n  // HueStatistics instance\n  private _hueStats: HueStatistics;\n\n  private _histogram: { [color: string]: number };\n\n  // # of highest-frequency colors to start with for palette reduction\n  private _initColors: number;\n\n  // if > 0, enables hues stats and min-color retention per group\n  private _minHueCols: number;\n\n  constructor(method: number, colors: number) {\n    // 1 = by global population, 2 = subregion population threshold\n    this._method = method;\n\n    // if > 0, enables hues stats and min-color retention per group\n    this._minHueCols = colors << 2;// opts.minHueCols || 0;\n\n    // # of highest-frequency colors to start with for palette reduction\n    this._initColors = colors << 2;\n\n    // HueStatistics instance\n    this._hueStats = new HueStatistics(ColorHistogram._hueGroups, this._minHueCols);\n\n    this._histogram = Object.create(null); // tslint:disable-line:no-null-keyword\n  }\n\n  sample(pointContainer: PointContainer) {\n    switch (this._method) {\n      case 1:\n        this._colorStats1D(pointContainer);\n        break;\n      case 2:\n        this._colorStats2D(pointContainer);\n        break;\n    }\n  }\n\n  getImportanceSortedColorsIDXI32() {\n    // TODO: fix typing issue in stableSort func\n    const sorted = stableSort(Object.keys(this._histogram), (a, b) => this._histogram[ b ] - this._histogram[ a ]);\n    if (sorted.length === 0) {\n      return [];\n    }\n\n    let idxi32: string[];\n    switch (this._method) {\n      case 1:\n        const initialColorsLimit = Math.min(sorted.length, this._initColors);\n        const last = sorted[ initialColorsLimit - 1 ];\n        const freq = this._histogram[ last ];\n\n        idxi32 = sorted.slice(0, initialColorsLimit);\n\n        // add any cut off colors with same freq as last\n        let pos = initialColorsLimit;\n        const len = sorted.length;\n        while (pos < len && this._histogram[ sorted[ pos ] ] === freq) {\n          idxi32.push(sorted[ pos++ ]);\n        }\n\n        // inject min huegroup colors\n        this._hueStats.injectIntoArray(idxi32);\n        break;\n\n      case 2:\n        idxi32 = sorted;\n        break;\n\n      default:\n        // TODO: rethink errors\n        throw new Error('Incorrect method');\n    }\n\n    // int32-ify values\n    return idxi32.map(function (v: string) { // TODO: why no-inferred-types rule cannot find this (v: string) ?\n      return +v;\n    });\n  }\n\n  // global top-population\n  private _colorStats1D(pointContainer: PointContainer) {\n    const histG = this._histogram;\n    const pointArray = pointContainer.getPointArray();\n    const len = pointArray.length;\n\n    for (let i = 0; i < len; i++) {\n      const col = pointArray[ i ].uint32;\n\n      // collect hue stats\n      this._hueStats.check(col);\n\n      if (col in histG) {\n        histG[ col ]++;\n      } else {\n        histG[ col ] = 1;\n      }\n    }\n  }\n\n  // population threshold within subregions\n  // FIXME: this can over-reduce (few/no colors same?), need a way to keep\n  // important colors that dont ever reach local thresholds (gradients?)\n  private _colorStats2D(pointContainer: PointContainer) {\n    const width = pointContainer.getWidth();\n    const height = pointContainer.getHeight();\n    const pointArray = pointContainer.getPointArray();\n\n    const boxW = ColorHistogram._boxSize[ 0 ];\n    const boxH = ColorHistogram._boxSize[ 1 ];\n    const area = boxW * boxH;\n    const boxes = this._makeBoxes(width, height, boxW, boxH);\n    const histG = this._histogram;\n\n    boxes.forEach(box => {\n      let effc = Math.round((box.w * box.h) / area) * ColorHistogram._boxPixels;\n      if (effc < 2) effc = 2;\n\n      const histL: { [key: string ]: number } = {};\n      this._iterateBox(box, width, (i) => {\n        const col = pointArray[ i ].uint32;\n\n        // collect hue stats\n        this._hueStats.check(col);\n\n        if (col in histG) {\n          histG[ col ]++;\n        } else if (col in histL) {\n          if (++histL[ col ] >= effc) {\n            histG[ col ] = histL[ col ];\n          }\n        } else {\n          histL[ col ] = 1;\n        }\n      });\n    });\n\n    // inject min huegroup colors\n    this._hueStats.injectIntoDictionary(histG);\n\n  }\n\n  // iterates @bbox within a parent rect of width @wid; calls @fn, passing index within parent\n  private _iterateBox(bbox: Box, wid: number, fn: (i: number) => void) {\n    const b = bbox;\n    const i0 = b.y * wid + b.x;\n    const i1 = (b.y + b.h - 1) * wid + (b.x + b.w - 1);\n    const incr = wid - b.w + 1;\n\n    let cnt = 0;\n    let i = i0;\n\n    do {\n      fn.call(this, i);\n      i += (++cnt % b.w === 0) ? incr : 1;\n    } while (i <= i1);\n  }\n\n  /**\n   *    partitions a rectangle of width x height into\n   *    array of boxes stepX x stepY (or less)\n   */\n  private _makeBoxes(width: number, height: number, stepX: number, stepY: number) {\n    const wrem = width % stepX;\n    const  hrem = height % stepY;\n    const xend = width - wrem;\n    const yend = height - hrem;\n    const boxesArray: Box[] = [];\n\n    for (let y = 0; y < height; y += stepY) {\n      for (let x = 0; x < width; x += stepX) {\n        boxesArray.push({ x, y, w: (x === xend ? wrem : stepX), h: (y === yend ? hrem : stepY) });\n      }\n    }\n\n    return boxesArray;\n  }\n\n}\n","/*\n * Copyright (c) 2015, Leon Sorokin\n * All rights reserved. (MIT Licensed)\n *\n * RGBQuant.js - an image quantization lib\n */\n\n/**\n * @preserve TypeScript port:\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * rgbquant.ts - part of Image Quantization Library\n */\n\nimport { Palette } from '../../utils/palette';\nimport { Point } from '../../utils/point';\nimport { PointContainer } from '../../utils/pointContainer';\nimport { AbstractDistanceCalculator } from '../../distance/distanceCalculator';\nimport { ColorHistogram } from './colorHistogram';\nimport { AbstractPaletteQuantizer } from '../paletteQuantizer';\nimport { PaletteQuantizerYieldValue } from '../paletteQuantizerYieldValue';\nimport { stableSort } from '../../utils/arithmetic';\nimport { ProgressTracker } from '../../utils';\n\nclass RemovedColor {\n  readonly index: number;\n  readonly color: Point;\n  readonly distance: number;\n\n  constructor(index: number, color: Point, distance: number) {\n    this.index = index;\n    this.color = color;\n    this.distance = distance;\n  }\n}\n\n// TODO: make input/output image and input/output palettes with instances of class Point only!\nexport class RGBQuant extends AbstractPaletteQuantizer {\n  // desired final palette size\n  private readonly _colors: number;\n\n  // color-distance threshold for initial reduction pass\n  private readonly _initialDistance: number;\n\n  // subsequent passes threshold\n  private readonly _distanceIncrement: number;\n\n  // accumulated histogram\n  private readonly _histogram: ColorHistogram;\n  private readonly _distance: AbstractDistanceCalculator;\n\n  constructor(colorDistanceCalculator: AbstractDistanceCalculator, colors = 256, method = 2) {\n    super();\n    this._distance = colorDistanceCalculator;\n    // desired final palette size\n    this._colors = colors;\n\n    // histogram to accumulate\n    this._histogram = new ColorHistogram(method, colors);\n\n    this._initialDistance = 0.01;\n    this._distanceIncrement = 0.005;\n  }\n\n  // gathers histogram info\n  sample(image: PointContainer) {\n    /*\n     var pointArray = image.getPointArray(), max = [0, 0, 0, 0], min = [255, 255, 255, 255];\n\n     for (var i = 0, l = pointArray.length; i < l; i++) {\n     var color = pointArray[i];\n     for (var componentIndex = 0; componentIndex < 4; componentIndex++) {\n     if (max[componentIndex] < color.rgba[componentIndex]) max[componentIndex] = color.rgba[componentIndex];\n     if (min[componentIndex] > color.rgba[componentIndex]) min[componentIndex] = color.rgba[componentIndex];\n     }\n     }\n     var rd = max[0] - min[0], gd = max[1] - min[1], bd = max[2] - min[2], ad = max[3] - min[3];\n     this._distance.setWhitePoint(rd, gd, bd, ad);\n\n     this._initialDistance = (Math.sqrt(rd * rd + gd * gd + bd * bd + ad * ad) / Math.sqrt(255 * 255 + 255 * 255 + 255 * 255)) * 0.01;\n     */\n\n    this._histogram.sample(image);\n  }\n\n  // reduces histogram to palette, remaps & memoizes reduced colors\n  * quantize() {\n    const idxi32 = this._histogram.getImportanceSortedColorsIDXI32();\n    if (idxi32.length === 0) {\n      throw new Error('No colors in image');\n    }\n\n    yield * this._buildPalette(idxi32);\n  }\n\n  // reduces similar colors from an importance-sorted Uint32 rgba array\n  private * _buildPalette(idxi32: number[]): IterableIterator<PaletteQuantizerYieldValue> {\n    // reduce histogram to create initial palette\n    // build full rgb palette\n    const palette = new Palette();\n    const colorArray = palette.getPointContainer().getPointArray();\n    const usageArray = new Array(idxi32.length); // tslint:disable-line:prefer-array-literal\n\n    for (let i = 0; i < idxi32.length; i++) {\n      colorArray.push(Point.createByUint32(idxi32[ i ]));\n      usageArray[ i ] = 1;\n    }\n\n    const len = colorArray.length;\n    const memDist: RemovedColor[] = [];\n\n    let palLen = len;\n    let thold = this._initialDistance;\n\n    // palette already at or below desired length\n    const tracker = new ProgressTracker(palLen - this._colors, 99);\n    while (palLen > this._colors) {\n      memDist.length = 0;\n\n      // iterate palette\n      for (let i = 0; i < len; i++) {\n        if (tracker.shouldNotify(len - palLen)) {\n          yield {\n            progress: tracker.progress,\n          };\n        }\n\n        if (usageArray[ i ] === 0) continue;\n        const pxi = colorArray[ i ];\n        // if (!pxi) continue;\n\n        for (let j = i + 1; j < len; j++) {\n          if (usageArray[ j ] === 0) continue;\n          const pxj = colorArray[ j ];\n          // if (!pxj) continue;\n\n          const dist = this._distance.calculateNormalized(pxi, pxj);\n          if (dist < thold) {\n            // store index,rgb,dist\n            memDist.push(new RemovedColor(j, pxj, dist));\n            usageArray[ j ] = 0;\n            palLen--;\n          }\n        }\n      }\n      // palette reduction pass\n      // console.log(\"palette length: \" + palLen);\n\n      // if palette is still much larger than target, increment by larger initDist\n      thold += (palLen > this._colors * 3) ? this._initialDistance : this._distanceIncrement;\n    }\n\n    // if palette is over-reduced, re-add removed colors with largest distances from last round\n    if (palLen < this._colors) {\n      // sort descending\n      stableSort(memDist, function (a: RemovedColor, b: RemovedColor) {\n        return b.distance - a.distance;\n      });\n\n      let k = 0;\n      while (palLen < this._colors && k < memDist.length) {\n        const removedColor = memDist[ k ];\n        // re-inject rgb into final palette\n        usageArray[ removedColor.index ] = 1;\n        palLen++;\n        k++;\n      }\n    }\n\n    let colors = colorArray.length;\n    for (let colorIndex = colors - 1; colorIndex >= 0; colorIndex--) {\n      if (usageArray[ colorIndex ] === 0) {\n        if (colorIndex !== colors - 1) {\n          colorArray[ colorIndex ] = colorArray[ colors - 1 ];\n        }\n        --colors;\n      }\n    }\n    colorArray.length = colors;\n\n    palette.sort();\n\n    yield {\n      palette,\n      progress: 100,\n    };\n  }\n\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * wuQuant.ts - part of Image Quantization Library\n */\nimport { Palette } from '../../utils/palette';\nimport { Point } from '../../utils/point';\nimport { PointContainer } from '../../utils/pointContainer';\nimport { AbstractDistanceCalculator } from '../../distance/distanceCalculator';\nimport { AbstractPaletteQuantizer } from '../paletteQuantizer';\nimport { PaletteQuantizerYieldValue } from '../paletteQuantizerYieldValue';\nimport { ProgressTracker } from '../../utils';\n\nfunction createArray1D(dimension1: number) {\n  const a: number[] = [];\n  for (let k = 0; k < dimension1; k++) {\n    a[ k ] = 0;\n  }\n  return a;\n}\n\nfunction createArray4D(dimension1: number, dimension2: number, dimension3: number, dimension4: number): number[][][][] {\n  const a = new Array(dimension1);\n  for (let i = 0; i < dimension1; i++) {\n    a[ i ] = new Array(dimension2);\n    for (let j = 0; j < dimension2; j++) {\n      a[ i ][ j ] = new Array(dimension3);\n      for (let k = 0; k < dimension3; k++) {\n        a[ i ][ j ][ k ] = new Array(dimension4);\n        for (let l = 0; l < dimension4; l++) {\n          a[ i ][ j ][ k ][ l ] = 0;\n        }\n      }\n    }\n  }\n  return a;\n}\n\nfunction createArray3D(dimension1: number, dimension2: number, dimension3: number): number[][][] {\n  const a = new Array(dimension1);\n  for (let i = 0; i < dimension1; i++) {\n    a[ i ] = new Array(dimension2);\n    for (let j = 0; j < dimension2; j++) {\n      a[ i ][ j ] = new Array(dimension3);\n      for (let k = 0; k < dimension3; k++) {\n        a[ i ][ j ][ k ] = 0;\n      }\n    }\n  }\n  return a;\n}\n\nfunction fillArray3D<T>(a: T[][][], dimension1: number, dimension2: number, dimension3: number, value: T) {\n  for (let i = 0; i < dimension1; i++) {\n    a[ i ] = [];\n    for (let j = 0; j < dimension2; j++) {\n      a[ i ][ j ] = [];\n      for (let k = 0; k < dimension3; k++) {\n        a[ i ][ j ][ k ] = value;\n      }\n    }\n  }\n}\n\nfunction fillArray1D<T>(a: T[], dimension1: number, value: T) {\n  for (let i = 0; i < dimension1; i++) {\n    a[ i ] = value;\n  }\n}\n\nexport class WuColorCube {\n  redMinimum!: number;\n  redMaximum!: number;\n  greenMinimum!: number;\n  greenMaximum!: number;\n  blueMinimum!: number;\n  blueMaximum!: number;\n  volume!: number;\n  alphaMinimum!: number;\n  alphaMaximum!: number;\n}\n\nexport class WuQuant extends AbstractPaletteQuantizer {\n\n  private static readonly _alpha = 3;\n  private static readonly _red = 2;\n  private static readonly _green = 1;\n  private static readonly _blue = 0;\n\n  private _reds!: number[];\n  private _greens!: number[];\n  private _blues!: number[];\n  private _alphas!: number[];\n  private _sums!: number[];\n\n  private _weights!: number[][][][];\n  private _momentsRed!: number[][][][];\n  private _momentsGreen!: number[][][][];\n  private _momentsBlue!: number[][][][];\n  private _momentsAlpha!: number[][][][];\n  private _moments!: number[][][][];\n  private _table!: number[];\n  private _pixels!: Point[];\n\n  private _cubes!: WuColorCube[];\n  private _colors!: number;\n\n  private _significantBitsPerChannel!: number;\n  private _maxSideIndex!: number;\n  private _alphaMaxSideIndex!: number;\n  private _sideSize!: number;\n  private _alphaSideSize!: number;\n\n  private readonly _distance: AbstractDistanceCalculator;\n\n  constructor(colorDistanceCalculator: AbstractDistanceCalculator, colors = 256, significantBitsPerChannel = 5) {\n    super();\n    this._distance = colorDistanceCalculator;\n    this._setQuality(significantBitsPerChannel);\n    this._initialize(colors);\n  }\n\n  sample(image: PointContainer) {\n    const pointArray = image.getPointArray();\n\n    for (let i = 0, l = pointArray.length; i < l; i++) {\n      this._addColor(pointArray[ i ]);\n    }\n\n    this._pixels = this._pixels.concat(pointArray);\n  }\n\n  * quantize() {\n    yield * this._preparePalette();\n\n    const palette = new Palette();\n\n    // generates palette\n    for (let paletteIndex = 0; paletteIndex < this._colors; paletteIndex++) {\n      if (this._sums[ paletteIndex ] > 0) {\n        const sum = this._sums[ paletteIndex ];\n        const r = this._reds[ paletteIndex ] / sum;\n        const g = this._greens[ paletteIndex ] / sum;\n        const b = this._blues[ paletteIndex ] / sum;\n        const a = this._alphas[ paletteIndex ] / sum;\n\n        const color = Point.createByRGBA(r | 0, g | 0, b | 0, a | 0);\n        palette.add(color);\n      }\n    }\n\n    palette.sort();\n\n    yield {\n      palette,\n      progress: 100,\n    };\n  }\n\n  private * _preparePalette() {\n    // preprocess the colors\n    yield * this._calculateMoments();\n\n    let next = 0;\n    const volumeVariance = createArray1D(this._colors);\n\n    // processes the cubes\n    for (let cubeIndex = 1; cubeIndex < this._colors; ++cubeIndex) {\n      // if cut is possible; make it\n      if (this._cut(this._cubes[ next ], this._cubes[ cubeIndex ])) {\n        volumeVariance[ next ] = this._cubes[ next ].volume > 1 ? this._calculateVariance(this._cubes[ next ]) : 0.0;\n        volumeVariance[ cubeIndex ] = this._cubes[ cubeIndex ].volume > 1 ? this._calculateVariance(this._cubes[ cubeIndex ]) : 0.0;\n      } else {\n        // the cut was not possible, revert the index\n        volumeVariance[ next ] = 0.0;\n        cubeIndex--;\n      }\n\n      next = 0;\n      let temp = volumeVariance[ 0 ];\n\n      for (let index = 1; index <= cubeIndex; ++index) {\n        if (volumeVariance[ index ] > temp) {\n          temp = volumeVariance[ index ];\n          next = index;\n        }\n      }\n\n      if (temp <= 0.0) {\n        this._colors = cubeIndex + 1;\n        break;\n      }\n    }\n\n    const lookupRed: number[] = [];\n    const lookupGreen: number[] = [];\n    const lookupBlue: number[] = [];\n    const lookupAlpha: number[] = [];\n\n    // precalculates lookup tables\n    for (let k = 0; k < this._colors; ++k) {\n\n      const weight = WuQuant._volume(this._cubes[ k ], this._weights);\n\n      if (weight > 0) {\n        lookupRed[ k ] = (WuQuant._volume(this._cubes[ k ], this._momentsRed) / weight) | 0;\n        lookupGreen[ k ] = (WuQuant._volume(this._cubes[ k ], this._momentsGreen) / weight) | 0;\n        lookupBlue[ k ] = (WuQuant._volume(this._cubes[ k ], this._momentsBlue) / weight) | 0;\n        lookupAlpha[ k ] = (WuQuant._volume(this._cubes[ k ], this._momentsAlpha) / weight) | 0;\n      } else {\n        lookupRed[ k ] = 0;\n        lookupGreen[ k ] = 0;\n        lookupBlue[ k ] = 0;\n        lookupAlpha[ k ] = 0;\n      }\n    }\n\n    this._reds = createArray1D(this._colors + 1);\n    this._greens = createArray1D(this._colors + 1);\n    this._blues = createArray1D(this._colors + 1);\n    this._alphas = createArray1D(this._colors + 1);\n    this._sums = createArray1D(this._colors + 1);\n\n    // scans and adds colors\n    for (let index = 0, l = this._pixels.length; index < l; index++) {\n      const color = this._pixels[ index ];\n\n      const match = -1;\n\n      let bestMatch = match;\n      let bestDistance = Number.MAX_VALUE;\n\n      for (let lookup = 0; lookup < this._colors; lookup++) {\n        const foundRed = lookupRed[ lookup ];\n        const foundGreen = lookupGreen[ lookup ];\n        const foundBlue = lookupBlue[ lookup ];\n        const foundAlpha = lookupAlpha[ lookup ];\n\n        const distance = this._distance.calculateRaw(foundRed, foundGreen, foundBlue, foundAlpha, color.r, color.g, color.b, color.a);\n\n        if (distance < bestDistance) {\n          bestDistance = distance;\n          bestMatch = lookup;\n        }\n      }\n\n      this._reds[ bestMatch ] += color.r;\n      this._greens[ bestMatch ] += color.g;\n      this._blues[ bestMatch ] += color.b;\n      this._alphas[ bestMatch ] += color.a;\n      this._sums[ bestMatch ]++;\n    }\n  }\n\n  private _addColor(color: Point) {\n    const bitsToRemove = 8 - this._significantBitsPerChannel;\n    const indexRed = (color.r >> bitsToRemove) + 1;\n    const indexGreen = (color.g >> bitsToRemove) + 1;\n    const indexBlue = (color.b >> bitsToRemove) + 1;\n    const indexAlpha = (color.a >> bitsToRemove) + 1;\n\n    // if(color.a > 10) {\n    this._weights[ indexAlpha ][ indexRed ][ indexGreen ][ indexBlue ]++;\n    this._momentsRed[ indexAlpha ][ indexRed ][ indexGreen ][ indexBlue ] += color.r;\n    this._momentsGreen[ indexAlpha ][ indexRed ][ indexGreen ][ indexBlue ] += color.g;\n    this._momentsBlue[ indexAlpha ][ indexRed ][ indexGreen ][ indexBlue ] += color.b;\n    this._momentsAlpha[ indexAlpha ][ indexRed ][ indexGreen ][ indexBlue ] += color.a;\n    this._moments[ indexAlpha ][ indexRed ][ indexGreen ][ indexBlue ] += this._table[ color.r ] + this._table[ color.g ] + this._table[ color.b ] + this._table[ color.a ];\n    // }\n  }\n\n  /**\n   * Converts the histogram to a series of _moments.\n   */\n  private * _calculateMoments(): IterableIterator<PaletteQuantizerYieldValue> {\n    const area: number[] = [];\n    const areaRed: number[] = [];\n    const areaGreen: number[] = [];\n    const areaBlue: number[] = [];\n    const areaAlpha: number[] = [];\n    const area2: number[] = [];\n\n    const xarea = createArray3D(this._sideSize, this._sideSize, this._sideSize);\n    const xareaRed = createArray3D(this._sideSize, this._sideSize, this._sideSize);\n    const xareaGreen = createArray3D(this._sideSize, this._sideSize, this._sideSize);\n    const xareaBlue = createArray3D(this._sideSize, this._sideSize, this._sideSize);\n    const xareaAlpha = createArray3D(this._sideSize, this._sideSize, this._sideSize);\n    const xarea2 = createArray3D(this._sideSize, this._sideSize, this._sideSize);\n\n    let trackerProgress = 0;\n    const tracker = new ProgressTracker(this._alphaMaxSideIndex * this._maxSideIndex, 99);\n\n    for (let alphaIndex = 1; alphaIndex <= this._alphaMaxSideIndex; ++alphaIndex) {\n      fillArray3D<number>(xarea, this._sideSize, this._sideSize, this._sideSize, 0);\n      fillArray3D<number>(xareaRed, this._sideSize, this._sideSize, this._sideSize, 0);\n      fillArray3D<number>(xareaGreen, this._sideSize, this._sideSize, this._sideSize, 0);\n      fillArray3D<number>(xareaBlue, this._sideSize, this._sideSize, this._sideSize, 0);\n      fillArray3D<number>(xareaAlpha, this._sideSize, this._sideSize, this._sideSize, 0);\n      fillArray3D<number>(xarea2, this._sideSize, this._sideSize, this._sideSize, 0);\n\n      for (let redIndex = 1; redIndex <= this._maxSideIndex; ++redIndex, ++trackerProgress) {\n        if (tracker.shouldNotify(trackerProgress)) {\n          yield {\n            progress: tracker.progress,\n          };\n        }\n\n        fillArray1D<number>(area, this._sideSize, 0);\n        fillArray1D<number>(areaRed, this._sideSize, 0);\n        fillArray1D<number>(areaGreen, this._sideSize, 0);\n        fillArray1D<number>(areaBlue, this._sideSize, 0);\n        fillArray1D<number>(areaAlpha, this._sideSize, 0);\n        fillArray1D<number>(area2, this._sideSize, 0);\n\n        for (let greenIndex = 1; greenIndex <= this._maxSideIndex; ++greenIndex) {\n          let line = 0;\n          let lineRed = 0;\n          let lineGreen = 0;\n          let lineBlue = 0;\n          let lineAlpha = 0;\n          let line2 = 0.0;\n\n          for (let blueIndex = 1; blueIndex <= this._maxSideIndex; ++blueIndex) {\n            line += this._weights[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ];\n            lineRed += this._momentsRed[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ];\n            lineGreen += this._momentsGreen[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ];\n            lineBlue += this._momentsBlue[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ];\n            lineAlpha += this._momentsAlpha[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ];\n            line2 += this._moments[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ];\n\n            area[ blueIndex ] += line;\n            areaRed[ blueIndex ] += lineRed;\n            areaGreen[ blueIndex ] += lineGreen;\n            areaBlue[ blueIndex ] += lineBlue;\n            areaAlpha[ blueIndex ] += lineAlpha;\n            area2[ blueIndex ] += line2;\n\n            xarea[ redIndex ][ greenIndex ][ blueIndex ] = xarea[ redIndex - 1 ][ greenIndex ][ blueIndex ] + area[ blueIndex ];\n            xareaRed[ redIndex ][ greenIndex ][ blueIndex ] = xareaRed[ redIndex - 1 ][ greenIndex ][ blueIndex ] + areaRed[ blueIndex ];\n            xareaGreen[ redIndex ][ greenIndex ][ blueIndex ] = xareaGreen[ redIndex - 1 ][ greenIndex ][ blueIndex ] + areaGreen[ blueIndex ];\n            xareaBlue[ redIndex ][ greenIndex ][ blueIndex ] = xareaBlue[ redIndex - 1 ][ greenIndex ][ blueIndex ] + areaBlue[ blueIndex ];\n            xareaAlpha[ redIndex ][ greenIndex ][ blueIndex ] = xareaAlpha[ redIndex - 1 ][ greenIndex ][ blueIndex ] + areaAlpha[ blueIndex ];\n            xarea2[ redIndex ][ greenIndex ][ blueIndex ] = xarea2[ redIndex - 1 ][ greenIndex ][ blueIndex ] + area2[ blueIndex ];\n\n            this._weights[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ] = this._weights[ alphaIndex - 1 ][ redIndex ][ greenIndex ][ blueIndex ] + xarea[ redIndex ][ greenIndex ][ blueIndex ];\n            this._momentsRed[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ] = this._momentsRed[ alphaIndex - 1 ][ redIndex ][ greenIndex ][ blueIndex ] + xareaRed[ redIndex ][ greenIndex ][ blueIndex ];\n            this._momentsGreen[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ] = this._momentsGreen[ alphaIndex - 1 ][ redIndex ][ greenIndex ][ blueIndex ] + xareaGreen[ redIndex ][ greenIndex ][ blueIndex ];\n            this._momentsBlue[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ] = this._momentsBlue[ alphaIndex - 1 ][ redIndex ][ greenIndex ][ blueIndex ] + xareaBlue[ redIndex ][ greenIndex ][ blueIndex ];\n            this._momentsAlpha[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ] = this._momentsAlpha[ alphaIndex - 1 ][ redIndex ][ greenIndex ][ blueIndex ] + xareaAlpha[ redIndex ][ greenIndex ][ blueIndex ];\n            this._moments[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ] = this._moments[ alphaIndex - 1 ][ redIndex ][ greenIndex ][ blueIndex ] + xarea2[ redIndex ][ greenIndex ][ blueIndex ];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Computes the volume of the cube in a specific moment.\n   */\n  private static _volumeFloat(cube: WuColorCube, moment: number[][][][]) {\n    return (moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMaximum ] -\n      moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMaximum ] -\n      moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMaximum ] +\n      moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ] -\n      moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMaximum ] +\n      moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMaximum ] +\n      moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMaximum ] -\n      moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ]) -\n\n      (moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMinimum ] -\n      moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMinimum ] -\n      moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] +\n      moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] -\n      moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] +\n      moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] +\n      moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ] -\n      moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ]);\n  }\n\n  /**\n   * Computes the volume of the cube in a specific moment.\n   */\n  private static _volume(cube: WuColorCube, moment: number[][][][]) {\n    return WuQuant._volumeFloat(cube, moment) | 0;\n  }\n\n  /**\n   * Splits the cube in given position][and color direction.\n   */\n  private static _top(cube: WuColorCube, direction: number, position: number, moment: number[][][][]) {\n    let result: number;\n    switch (direction) {\n      case WuQuant._alpha:\n        result = (moment[ position ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMaximum ] -\n          moment[ position ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMaximum ] -\n          moment[ position ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMaximum ] +\n          moment[ position ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ]) -\n          (moment[ position ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMinimum ] -\n          moment[ position ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] -\n          moment[ position ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] +\n          moment[ position ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ]);\n        break;\n\n      case WuQuant._red:\n        result = (moment[ cube.alphaMaximum ][ position ][ cube.greenMaximum ][ cube.blueMaximum ] -\n          moment[ cube.alphaMaximum ][ position ][ cube.greenMinimum ][ cube.blueMaximum ] -\n          moment[ cube.alphaMinimum ][ position ][ cube.greenMaximum ][ cube.blueMaximum ] +\n          moment[ cube.alphaMinimum ][ position ][ cube.greenMinimum ][ cube.blueMaximum ]) -\n          (moment[ cube.alphaMaximum ][ position ][ cube.greenMaximum ][ cube.blueMinimum ] -\n          moment[ cube.alphaMaximum ][ position ][ cube.greenMinimum ][ cube.blueMinimum ] -\n          moment[ cube.alphaMinimum ][ position ][ cube.greenMaximum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ position ][ cube.greenMinimum ][ cube.blueMinimum ]);\n        break;\n\n      case WuQuant._green:\n        result = (moment[ cube.alphaMaximum ][ cube.redMaximum ][ position ][ cube.blueMaximum ] -\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ position ][ cube.blueMaximum ] -\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ position ][ cube.blueMaximum ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ position ][ cube.blueMaximum ]) -\n          (moment[ cube.alphaMaximum ][ cube.redMaximum ][ position ][ cube.blueMinimum ] -\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ position ][ cube.blueMinimum ] -\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ position ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ position ][ cube.blueMinimum ]);\n        break;\n\n      case WuQuant._blue:\n        result = (moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMaximum ][ position ] -\n          moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMinimum ][ position ] -\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMaximum ][ position ] +\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ position ]) -\n          (moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMaximum ][ position ] -\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ position ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ position ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ position ]);\n        break;\n      default:\n        throw new Error('impossible');\n    }\n\n    return result | 0;\n  }\n\n  /**\n   * Splits the cube in a given color direction at its minimum.\n   */\n  private static _bottom(cube: WuColorCube, direction: number, moment: number[][][][]) {\n    switch (direction) {\n      case WuQuant._alpha:\n        return (-moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMaximum ] +\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMaximum ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMaximum ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ]) -\n          (-moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ]);\n\n      case WuQuant._red:\n        return (-moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMaximum ] +\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMaximum ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ]) -\n          (-moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ]);\n\n      case WuQuant._green:\n        return (-moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMaximum ] +\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ] +\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMaximum ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ]) -\n          (-moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ]);\n\n      case WuQuant._blue:\n        return (-moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] -\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ]) -\n          (-moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ]);\n\n      default:\n        // TODO: why here is return 0, and in this._top there is no default at all (now it is throw error)?\n        return 0;\n    }\n  }\n\n  /**\n   * Calculates statistical variance for a given cube.\n   */\n  private  _calculateVariance(cube: WuColorCube) {\n    const volumeRed = WuQuant._volume(cube, this._momentsRed);\n    const volumeGreen = WuQuant._volume(cube, this._momentsGreen);\n    const volumeBlue = WuQuant._volume(cube, this._momentsBlue);\n    const volumeAlpha = WuQuant._volume(cube, this._momentsAlpha);\n    const volumeMoment = WuQuant._volumeFloat(cube, this._moments);\n    const volumeWeight = WuQuant._volume(cube, this._weights);\n    const distance = volumeRed * volumeRed + volumeGreen * volumeGreen + volumeBlue * volumeBlue + volumeAlpha * volumeAlpha;\n\n    return volumeMoment - (distance / volumeWeight);\n  }\n\n  /**\n   * Finds the optimal (maximal) position for the cut.\n   */\n  private _maximize(cube: WuColorCube, direction: number, first: number, last: number, wholeRed: number, wholeGreen: number, wholeBlue: number, wholeAlpha: number, wholeWeight: number) {\n    const bottomRed = WuQuant._bottom(cube, direction, this._momentsRed) | 0;\n    const bottomGreen = WuQuant._bottom(cube, direction, this._momentsGreen) | 0;\n    const bottomBlue = WuQuant._bottom(cube, direction, this._momentsBlue) | 0;\n    const bottomAlpha = WuQuant._bottom(cube, direction, this._momentsAlpha) | 0;\n    const bottomWeight = WuQuant._bottom(cube, direction, this._weights) | 0;\n\n    let result = 0.0;\n    let cutPosition = -1;\n\n    for (let position = first; position < last; ++position) {\n      // determines the cube cut at a certain position\n      let halfRed = bottomRed + WuQuant._top(cube, direction, position, this._momentsRed);\n      let halfGreen = bottomGreen + WuQuant._top(cube, direction, position, this._momentsGreen);\n      let halfBlue = bottomBlue + WuQuant._top(cube, direction, position, this._momentsBlue);\n      let halfAlpha = bottomAlpha + WuQuant._top(cube, direction, position, this._momentsAlpha);\n      let halfWeight = bottomWeight + WuQuant._top(cube, direction, position, this._weights);\n\n      // the cube cannot be cut at bottom (this would lead to empty cube)\n      if (halfWeight !== 0) {\n        let halfDistance = halfRed * halfRed + halfGreen * halfGreen + halfBlue * halfBlue + halfAlpha * halfAlpha;\n        let temp = halfDistance / halfWeight;\n\n        halfRed = wholeRed - halfRed;\n        halfGreen = wholeGreen - halfGreen;\n        halfBlue = wholeBlue - halfBlue;\n        halfAlpha = wholeAlpha - halfAlpha;\n        halfWeight = wholeWeight - halfWeight;\n\n        if (halfWeight !== 0) {\n          halfDistance = halfRed * halfRed + halfGreen * halfGreen + halfBlue * halfBlue + halfAlpha * halfAlpha;\n          temp += halfDistance / halfWeight;\n\n          if (temp > result) {\n            result = temp;\n            cutPosition = position;\n          }\n        }\n      }\n    }\n\n    return { max: result, position: cutPosition };\n  }\n\n  // Cuts a cube with another one.\n  private _cut(first: WuColorCube, second: WuColorCube) {\n    let direction: number;\n\n    const wholeRed = WuQuant._volume(first, this._momentsRed);\n    const wholeGreen = WuQuant._volume(first, this._momentsGreen);\n    const wholeBlue = WuQuant._volume(first, this._momentsBlue);\n    const wholeAlpha = WuQuant._volume(first, this._momentsAlpha);\n    const wholeWeight = WuQuant._volume(first, this._weights);\n\n    const red = this._maximize(first, WuQuant._red, first.redMinimum + 1, first.redMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\n    const green = this._maximize(first, WuQuant._green, first.greenMinimum + 1, first.greenMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\n    const blue = this._maximize(first, WuQuant._blue, first.blueMinimum + 1, first.blueMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\n    const alpha = this._maximize(first, WuQuant._alpha, first.alphaMinimum + 1, first.alphaMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\n\n    if (alpha.max >= red.max && alpha.max >= green.max && alpha.max >= blue.max) {\n      direction = WuQuant._alpha;\n\n      // cannot split empty cube\n      if (alpha.position < 0) return false;\n    } else {\n      if (red.max >= alpha.max && red.max >= green.max && red.max >= blue.max) {\n        direction = WuQuant._red;\n      } else if (green.max >= alpha.max && green.max >= red.max && green.max >= blue.max) {\n        direction = WuQuant._green;\n      } else {\n        direction = WuQuant._blue;\n      }\n    }\n\n    second.redMaximum = first.redMaximum;\n    second.greenMaximum = first.greenMaximum;\n    second.blueMaximum = first.blueMaximum;\n    second.alphaMaximum = first.alphaMaximum;\n\n    // cuts in a certain direction\n    switch (direction) {\n      case WuQuant._red:\n        second.redMinimum = first.redMaximum = red.position;\n        second.greenMinimum = first.greenMinimum;\n        second.blueMinimum = first.blueMinimum;\n        second.alphaMinimum = first.alphaMinimum;\n        break;\n\n      case WuQuant._green:\n        second.greenMinimum = first.greenMaximum = green.position;\n        second.redMinimum = first.redMinimum;\n        second.blueMinimum = first.blueMinimum;\n        second.alphaMinimum = first.alphaMinimum;\n        break;\n\n      case WuQuant._blue:\n        second.blueMinimum = first.blueMaximum = blue.position;\n        second.redMinimum = first.redMinimum;\n        second.greenMinimum = first.greenMinimum;\n        second.alphaMinimum = first.alphaMinimum;\n        break;\n\n      case WuQuant._alpha:\n        second.alphaMinimum = first.alphaMaximum = alpha.position;\n        second.blueMinimum = first.blueMinimum;\n        second.redMinimum = first.redMinimum;\n        second.greenMinimum = first.greenMinimum;\n        break;\n    }\n\n    // determines the volumes after cut\n    first.volume = (first.redMaximum - first.redMinimum) * (first.greenMaximum - first.greenMinimum) * (first.blueMaximum - first.blueMinimum) * (first.alphaMaximum - first.alphaMinimum);\n    second.volume = (second.redMaximum - second.redMinimum) * (second.greenMaximum - second.greenMinimum) * (second.blueMaximum - second.blueMinimum) * (second.alphaMaximum - second.alphaMinimum);\n\n    // the cut was successful\n    return true;\n  }\n\n  private _initialize(colors: number) {\n    this._colors = colors;\n\n    // creates all the _cubes\n    this._cubes = [];\n\n    // initializes all the _cubes\n    for (let cubeIndex = 0; cubeIndex < colors; cubeIndex++) {\n      this._cubes[ cubeIndex ] = new WuColorCube();\n    }\n\n    // resets the reference minimums\n    this._cubes[ 0 ].redMinimum = 0;\n    this._cubes[ 0 ].greenMinimum = 0;\n    this._cubes[ 0 ].blueMinimum = 0;\n    this._cubes[ 0 ].alphaMinimum = 0;\n\n    // resets the reference maximums\n    this._cubes[ 0 ].redMaximum = this._maxSideIndex;\n    this._cubes[ 0 ].greenMaximum = this._maxSideIndex;\n    this._cubes[ 0 ].blueMaximum = this._maxSideIndex;\n    this._cubes[ 0 ].alphaMaximum = this._alphaMaxSideIndex;\n\n    this._weights = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\n    this._momentsRed = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\n    this._momentsGreen = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\n    this._momentsBlue = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\n    this._momentsAlpha = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\n    this._moments = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\n\n    this._table = [];\n    for (let tableIndex = 0; tableIndex < 256; ++tableIndex) {\n      this._table[ tableIndex ] = tableIndex * tableIndex;\n    }\n\n    this._pixels = [];\n  }\n\n  private _setQuality(significantBitsPerChannel = 5) {\n    this._significantBitsPerChannel = significantBitsPerChannel;\n    this._maxSideIndex = 1 << this._significantBitsPerChannel;\n    this._alphaMaxSideIndex = this._maxSideIndex;\n\n    this._sideSize = this._maxSideIndex + 1;\n    this._alphaSideSize = this._alphaMaxSideIndex + 1;\n  }\n\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * iq.ts - Image Quantization Library\n */\nexport { AbstractPaletteQuantizer } from './paletteQuantizer';\nexport { NeuQuant } from './neuquant/neuquant';\nexport { NeuQuantFloat } from './neuquant/neuquantFloat';\nexport { RGBQuant } from './rgbquant/rgbquant';\nexport { ColorHistogram } from './rgbquant/colorHistogram';\nexport { WuQuant, WuColorCube } from './wu/wuQuant';\nexport { PaletteQuantizerYieldValue } from './paletteQuantizerYieldValue';\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * common.ts - part of Image Quantization Library\n */\nimport { PointContainer } from '../utils/pointContainer';\nimport { Palette } from '../utils/palette';\nimport { ImageQuantizerYieldValue } from './imageQuantizerYieldValue';\n\nexport abstract class AbstractImageQuantizer {\n  abstract quantize(pointContainer: PointContainer, palette: Palette): IterableIterator<ImageQuantizerYieldValue>;\n\n  quantizeSync(pointContainer: PointContainer, palette: Palette) {\n    for (const value of this.quantize(pointContainer, palette)) {\n      if (value.pointContainer) {\n        return value.pointContainer;\n      }\n    }\n\n    throw new Error('unreachable');\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * nearestColor.ts - part of Image Quantization Library\n */\nimport { AbstractImageQuantizer } from './imageQuantizer';\nimport { AbstractDistanceCalculator } from '../distance/distanceCalculator';\nimport { PointContainer } from '../utils/pointContainer';\nimport { Palette } from '../utils/palette';\nimport { ImageQuantizerYieldValue } from './imageQuantizerYieldValue';\nimport { ProgressTracker } from '../utils/progressTracker';\n\nexport class NearestColor extends AbstractImageQuantizer {\n  private _distance: AbstractDistanceCalculator;\n\n  constructor(colorDistanceCalculator: AbstractDistanceCalculator) {\n    super();\n    this._distance = colorDistanceCalculator;\n  }\n\n  /**\n   * Mutates pointContainer\n   */\n  * quantize(pointContainer: PointContainer, palette: Palette): IterableIterator<ImageQuantizerYieldValue> {\n    const pointArray = pointContainer.getPointArray();\n    const width = pointContainer.getWidth();\n    const height = pointContainer.getHeight();\n\n    const tracker = new ProgressTracker(height, 99);\n    for (let y = 0; y < height; y++) {\n      if (tracker.shouldNotify(y)) {\n        yield {\n          progress: tracker.progress,\n        };\n      }\n      for (let x = 0, idx = y * width; x < width; x++, idx++) {\n        // Image pixel\n        const point = pointArray[ idx ];\n        // Reduced pixel\n        point.from(palette.getNearestColor(this._distance, point));\n      }\n    }\n\n    yield {\n      pointContainer,\n      progress: 100,\n    };\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * ditherErrorDiffusionArray.ts - part of Image Quantization Library\n */\nimport { AbstractImageQuantizer } from './imageQuantizer';\nimport { AbstractDistanceCalculator } from '../distance/distanceCalculator';\nimport { PointContainer } from '../utils/pointContainer';\nimport { Palette } from '../utils/palette';\nimport { Point } from '../utils/point';\nimport { inRange0to255Rounded } from '../utils/arithmetic';\nimport { ImageQuantizerYieldValue } from './imageQuantizerYieldValue';\nimport { ProgressTracker } from '../utils/progressTracker';\n\n// TODO: is it the best name for this enum \"kernel\"?\nexport enum ErrorDiffusionArrayKernel {\n  FloydSteinberg = 0,\n  FalseFloydSteinberg,\n  Stucki,\n  Atkinson,\n  Jarvis,\n  Burkes,\n  Sierra,\n  TwoSierra,\n  SierraLite,\n}\n\n// http://www.tannerhelland.com/4660/dithering-eleven-algorithms-source-code/\nexport class ErrorDiffusionArray extends AbstractImageQuantizer {\n  private _minColorDistance: number;\n  private _serpentine: boolean;\n  private _kernel!: number[][];\n  /** true = GIMP, false = XNVIEW */\n  private _calculateErrorLikeGIMP: boolean;\n\n  private _distance: AbstractDistanceCalculator;\n\n  constructor(colorDistanceCalculator: AbstractDistanceCalculator, kernel: ErrorDiffusionArrayKernel, serpentine = true, minimumColorDistanceToDither = 0, calculateErrorLikeGIMP = false) {\n    super();\n    this._setKernel(kernel);\n\n    this._distance = colorDistanceCalculator;\n    this._minColorDistance = minimumColorDistanceToDither;\n    this._serpentine = serpentine;\n    this._calculateErrorLikeGIMP = calculateErrorLikeGIMP;\n  }\n\n  /**\n   * adapted from http://jsbin.com/iXofIji/2/edit by PAEz\n   * fixed version. it doesn't use image pixels as error storage, also it doesn't have 0.3 + 0.3 + 0.3 + 0.3 = 0 error\n   * Mutates pointContainer\n   */\n  * quantize(pointContainer: PointContainer, palette: Palette): IterableIterator<ImageQuantizerYieldValue> {\n    const pointArray = pointContainer.getPointArray();\n    const originalPoint = new Point();\n    const width = pointContainer.getWidth();\n    const height = pointContainer.getHeight();\n    const errorLines: number[][][] = [];\n\n    let dir = 1;\n    let maxErrorLines = 1;\n\n    // initial error lines (number is taken from dithering kernel)\n    for (const kernel of this._kernel) {\n      const kernelErrorLines = kernel[ 2 ] + 1;\n      if (maxErrorLines < kernelErrorLines) maxErrorLines = kernelErrorLines;\n    }\n    for (let i = 0; i < maxErrorLines; i++) {\n      this._fillErrorLine(errorLines[ i ] = [], width);\n    }\n\n    const tracker = new ProgressTracker(height, 99);\n    for (let y = 0; y < height; y++) {\n      if (tracker.shouldNotify(y)) {\n        yield {\n          progress: tracker.progress,\n        };\n      }\n\n      // always serpentine\n      if (this._serpentine) dir = dir * -1;\n\n      const lni = y * width;\n      const xStart = dir === 1 ? 0 : width - 1;\n      const xEnd = dir === 1 ? width : -1;\n\n      // cyclic shift with erasing\n      this._fillErrorLine(errorLines[ 0 ], width);\n      // TODO: why it is needed to cast types here?\n      errorLines.push(errorLines.shift() as number[][]);\n\n      const errorLine = errorLines[ 0 ];\n      for (let x = xStart, idx = lni + xStart; x !== xEnd; x += dir, idx += dir) {\n        // Image pixel\n        const point = pointArray[ idx ];\n        // originalPoint = new Utils.Point(),\n        const error = errorLine[ x ];\n\n        originalPoint.from(point);\n\n        const correctedPoint = Point.createByRGBA(\n          inRange0to255Rounded(point.r + error[ 0 ]),\n          inRange0to255Rounded(point.g + error[ 1 ]),\n          inRange0to255Rounded(point.b + error[ 2 ]),\n          inRange0to255Rounded(point.a + error[ 3 ]),\n        );\n\n        // Reduced pixel\n        const palettePoint = palette.getNearestColor(this._distance, correctedPoint);\n        point.from(palettePoint);\n\n        // dithering strength\n        if (this._minColorDistance) {\n          const dist = this._distance.calculateNormalized(point, palettePoint);\n          if (dist < this._minColorDistance) continue;\n        }\n\n        // Component distance\n        let er: number;\n        let eg: number;\n        let eb: number;\n        let ea: number;\n        if (this._calculateErrorLikeGIMP) {\n          er = correctedPoint.r - palettePoint.r;\n          eg = correctedPoint.g - palettePoint.g;\n          eb = correctedPoint.b - palettePoint.b;\n          ea = correctedPoint.a - palettePoint.a;\n        } else {\n          er = originalPoint.r - palettePoint.r;\n          eg = originalPoint.g - palettePoint.g;\n          eb = originalPoint.b - palettePoint.b;\n          ea = originalPoint.a - palettePoint.a;\n        }\n\n        const dStart = dir === 1 ? 0 : this._kernel.length - 1;\n        const dEnd = dir === 1 ? this._kernel.length : -1;\n\n        for (let i = dStart; i !== dEnd; i += dir) {\n          const x1 = this._kernel[ i ][ 1 ] * dir;\n          const y1 = this._kernel[ i ][ 2 ];\n\n          if (x1 + x >= 0 && x1 + x < width && y1 + y >= 0 && y1 + y < height) {\n            const d = this._kernel[ i ][ 0 ];\n            const e = errorLines[ y1 ][ x1 + x ];\n\n            e[ 0 ] = e[ 0 ] + er * d;\n            e[ 1 ] = e[ 1 ] + eg * d;\n            e[ 2 ] = e[ 2 ] + eb * d;\n            e[ 3 ] = e[ 3 ] + ea * d;\n          }\n        }\n      }\n    }\n\n    yield {\n      pointContainer,\n      progress: 100,\n    };\n  }\n\n  private _fillErrorLine(errorLine: number[][], width: number) {\n    // shrink\n    if (errorLine.length > width) {\n      errorLine.length = width;\n    }\n\n    // reuse existing arrays\n    const l = errorLine.length;\n    for (let i = 0; i < l; i++) {\n      const error = errorLine[ i ];\n      error[ 0 ] = error[ 1 ] = error[ 2 ] = error[ 3 ] = 0;\n    }\n\n    // create missing arrays\n    for (let i = l; i < width; i++) {\n      errorLine[ i ] = [0.0, 0.0, 0.0, 0.0];\n    }\n  }\n\n  private _setKernel(kernel: ErrorDiffusionArrayKernel) {\n    switch (kernel) {\n      case ErrorDiffusionArrayKernel.FloydSteinberg:\n        this._kernel = [\n          [7 / 16, 1, 0],\n          [3 / 16, -1, 1],\n          [5 / 16, 0, 1],\n          [1 / 16, 1, 1],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.FalseFloydSteinberg:\n        this._kernel = [\n          [3 / 8, 1, 0],\n          [3 / 8, 0, 1],\n          [2 / 8, 1, 1],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.Stucki:\n        this._kernel = [\n          [8 / 42, 1, 0],\n          [4 / 42, 2, 0],\n          [2 / 42, -2, 1],\n          [4 / 42, -1, 1],\n          [8 / 42, 0, 1],\n          [4 / 42, 1, 1],\n          [2 / 42, 2, 1],\n          [1 / 42, -2, 2],\n          [2 / 42, -1, 2],\n          [4 / 42, 0, 2],\n          [2 / 42, 1, 2],\n          [1 / 42, 2, 2],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.Atkinson:\n        this._kernel = [\n          [1 / 8, 1, 0],\n          [1 / 8, 2, 0],\n          [1 / 8, -1, 1],\n          [1 / 8, 0, 1],\n          [1 / 8, 1, 1],\n          [1 / 8, 0, 2],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.Jarvis:\n        this._kernel = [\t\t\t// Jarvis, Judice, and Ninke / JJN?\n          [7 / 48, 1, 0],\n          [5 / 48, 2, 0],\n          [3 / 48, -2, 1],\n          [5 / 48, -1, 1],\n          [7 / 48, 0, 1],\n          [5 / 48, 1, 1],\n          [3 / 48, 2, 1],\n          [1 / 48, -2, 2],\n          [3 / 48, -1, 2],\n          [5 / 48, 0, 2],\n          [3 / 48, 1, 2],\n          [1 / 48, 2, 2],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.Burkes:\n        this._kernel = [\n          [8 / 32, 1, 0],\n          [4 / 32, 2, 0],\n          [2 / 32, -2, 1],\n          [4 / 32, -1, 1],\n          [8 / 32, 0, 1],\n          [4 / 32, 1, 1],\n          [2 / 32, 2, 1],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.Sierra:\n        this._kernel = [\n          [5 / 32, 1, 0],\n          [3 / 32, 2, 0],\n          [2 / 32, -2, 1],\n          [4 / 32, -1, 1],\n          [5 / 32, 0, 1],\n          [4 / 32, 1, 1],\n          [2 / 32, 2, 1],\n          [2 / 32, -1, 2],\n          [3 / 32, 0, 2],\n          [2 / 32, 1, 2],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.TwoSierra:\n        this._kernel = [\n          [4 / 16, 1, 0],\n          [3 / 16, 2, 0],\n          [1 / 16, -2, 1],\n          [2 / 16, -1, 1],\n          [3 / 16, 0, 1],\n          [2 / 16, 1, 1],\n          [1 / 16, 2, 1],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.SierraLite:\n        this._kernel = [\n          [2 / 4, 1, 0],\n          [1 / 4, -1, 1],\n          [1 / 4, 0, 1],\n        ];\n        break;\n\n      default:\n        throw new Error('ErrorDiffusionArray: unknown kernel = ' + kernel);\n    }\n  }\n}\n","import { ProgressTracker } from '../../utils/progressTracker';\nimport { ImageQuantizerYieldValue } from '../imageQuantizerYieldValue';\n\nenum Direction {\n  NONE = 0,\n  UP,\n  LEFT,\n  RIGHT,\n  DOWN,\n}\n\ninterface Data {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  level: number;\n  index: number;\n  tracker: ProgressTracker;\n  callback(x: number, y: number): void;\n}\n\nexport function * hilbertCurve(width: number, height: number, callback: (x: number, y: number) => void) {\n  const maxBound = Math.max(width, height);\n  const level = Math.floor(Math.log(maxBound) / Math.log(2) + 1);\n  const tracker = new ProgressTracker(width * height, 99);\n  const data = {\n    width,\n    height,\n    level,\n    callback,\n    tracker,\n    index: 0,\n    x: 0,\n    y: 0,\n  };\n  yield * walkHilbert(data, Direction.UP);\n  visit(data, Direction.NONE);\n}\n\nfunction * walkHilbert(data: Data, direction: Direction): IterableIterator<ImageQuantizerYieldValue> {\n  if (data.level < 1) return;\n\n  if (data.tracker.shouldNotify(data.index)) yield { progress: data.tracker.progress };\n  data.level--;\n  switch (direction) {\n    case Direction.LEFT:\n      yield * walkHilbert(data, Direction.UP);\n      visit(data, Direction.RIGHT);\n      yield * walkHilbert(data, Direction.LEFT);\n      visit(data, Direction.DOWN);\n      yield * walkHilbert(data, Direction.LEFT);\n      visit(data, Direction.LEFT);\n      yield * walkHilbert(data, Direction.DOWN);\n      break;\n\n    case Direction.RIGHT:\n      yield * walkHilbert(data, Direction.DOWN);\n      visit(data, Direction.LEFT);\n      yield * walkHilbert(data, Direction.RIGHT);\n      visit(data, Direction.UP);\n      yield * walkHilbert(data, Direction.RIGHT);\n      visit(data, Direction.RIGHT);\n      yield * walkHilbert(data, Direction.UP);\n      break;\n\n    case Direction.UP:\n      yield * walkHilbert(data, Direction.LEFT);\n      visit(data, Direction.DOWN);\n      yield * walkHilbert(data, Direction.UP);\n      visit(data, Direction.RIGHT);\n      yield * walkHilbert(data, Direction.UP);\n      visit(data, Direction.UP);\n      yield * walkHilbert(data, Direction.RIGHT);\n      break;\n\n    case Direction.DOWN:\n      yield * walkHilbert(data, Direction.RIGHT);\n      visit(data, Direction.UP);\n      yield * walkHilbert(data, Direction.DOWN);\n      visit(data, Direction.LEFT);\n      yield * walkHilbert(data, Direction.DOWN);\n      visit(data, Direction.DOWN);\n      yield * walkHilbert(data, Direction.LEFT);\n      break;\n\n    default:\n      break;\n  }\n  data.level++;\n}\n\nfunction visit(data: Data, direction: Direction) {\n  if (data.x >= 0 && data.x < data.width && data.y >= 0 && data.y < data.height) {\n    data.callback(data.x, data.y);\n    data.index++;\n  }\n  switch (direction) {\n    case Direction.LEFT:\n      data.x--;\n      break;\n    case Direction.RIGHT:\n      data.x++;\n      break;\n    case Direction.UP:\n      data.y--;\n      break;\n    case Direction.DOWN:\n      data.y++;\n      break;\n  }\n}\n","/**\n * @preserve\n * MIT License\n *\n * Copyright 2015-2018 Igor Bezkrovnyi\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n * riemersma.ts - part of Image Quantization Library\n */\nimport { AbstractImageQuantizer } from './imageQuantizer';\nimport { hilbertCurve } from './spaceFillingCurves/hilbertCurve';\nimport { AbstractDistanceCalculator } from '../distance/distanceCalculator';\nimport { PointContainer } from '../utils/pointContainer';\nimport { Palette } from '../utils/palette';\nimport { Point } from '../utils/point';\nimport { inRange0to255Rounded } from '../utils/arithmetic';\nimport { ImageQuantizerYieldValue } from './imageQuantizerYieldValue';\n\nexport class ErrorDiffusionRiemersma extends AbstractImageQuantizer {\n  private _distance: AbstractDistanceCalculator;\n  private _weights: number[];\n  private _errorQueueSize: number;\n\n  constructor(colorDistanceCalculator: AbstractDistanceCalculator, errorQueueSize = 16, errorPropagation = 1) {\n    super();\n    this._distance = colorDistanceCalculator;\n    this._errorQueueSize = errorQueueSize;\n    this._weights = ErrorDiffusionRiemersma._createWeights(errorPropagation, errorQueueSize);\n  }\n\n  /**\n   * Mutates pointContainer\n   */\n  * quantize(pointContainer: PointContainer, palette: Palette) {\n    const pointArray = pointContainer.getPointArray();\n    const width = pointContainer.getWidth();\n    const height = pointContainer.getHeight();\n    const errorQueue: Array<{ r: number; g: number; b: number; a: number }> = [];\n\n    let head = 0;\n\n    for (let i = 0; i < this._errorQueueSize; i++) {\n      errorQueue[i] = { r: 0, g: 0, b: 0, a: 0 };\n    }\n\n    yield * hilbertCurve(width, height, (x, y) => {\n      const p = pointArray[x + y * width];\n      let r = p.r;\n      let g = p.g;\n      let b = p.b;\n      let a = p.a;\n      for (let i = 0; i < this._errorQueueSize; i++) {\n        const weight = this._weights[i];\n        const e = errorQueue[(i + head) % this._errorQueueSize];\n\n        r += e.r * weight;\n        g += e.g * weight;\n        b += e.b * weight;\n        a += e.a * weight;\n      }\n\n      const correctedPoint = Point.createByRGBA(\n        inRange0to255Rounded(r),\n        inRange0to255Rounded(g),\n        inRange0to255Rounded(b),\n        inRange0to255Rounded(a),\n      );\n\n      const quantizedPoint = palette.getNearestColor(this._distance, correctedPoint);\n\n      // update head and calculate tail\n      head = (head + 1) % this._errorQueueSize;\n      const tail = (head + this._errorQueueSize - 1) % this._errorQueueSize;\n\n      // update error with new value\n      errorQueue[tail].r = p.r - quantizedPoint.r;\n      errorQueue[tail].g = p.g - quantizedPoint.g;\n      errorQueue[tail].b = p.b - quantizedPoint.b;\n      errorQueue[tail].a = p.a - quantizedPoint.a;\n\n      // update point\n      p.from(quantizedPoint);\n    });\n\n    yield {\n      pointContainer,\n      progress: 100,\n    };\n  }\n\n  private static _createWeights(errorPropagation: number, errorQueueSize: number) {\n    const weights: number[] = [];\n\n    const multiplier = Math.exp(Math.log(errorQueueSize) / (errorQueueSize - 1));\n    for (let i = 0, next = 1; i < errorQueueSize; i++) {\n      weights[i] = (((next + 0.5) | 0) / errorQueueSize) * errorPropagation;\n      next *= multiplier;\n    }\n\n    return weights;\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * iq.ts - Image Quantization Library\n */\n\nexport { AbstractImageQuantizer } from './imageQuantizer';\nexport { ImageQuantizerYieldValue } from './imageQuantizerYieldValue';\nexport { NearestColor } from './nearestColor';\nexport { ErrorDiffusionArray, ErrorDiffusionArrayKernel } from './array';\nexport { ErrorDiffusionRiemersma } from './riemersma';\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * ssim.ts - part of Image Quantization Library\n */\nimport { PointContainer } from '../utils/pointContainer';\nimport { Y } from '../constants/bt709';\n\n// based on https://github.com/rhys-e/structural-similarity\n// http://en.wikipedia.org/wiki/Structural_similarity\nconst K1 = 0.01; // tslint:disable-line:naming-convention\nconst K2 = 0.03; // tslint:disable-line:naming-convention\n\nexport function ssim(image1: PointContainer, image2: PointContainer) {\n  if (image1.getHeight() !== image2.getHeight() || image1.getWidth() !== image2.getWidth()) {\n    throw new Error('Images have different sizes!');\n  }\n\n  const bitsPerComponent = 8;\n  const L = (1 << bitsPerComponent) - 1; // tslint:disable-line:naming-convention\n  const c1 = Math.pow((K1 * L), 2);\n  const c2 = Math.pow((K2 * L), 2);\n\n  let numWindows = 0;\n  let mssim = 0.0;\n\n  // calculate ssim for each window\n  iterate(image1, image2, (lumaValues1, lumaValues2, averageLumaValue1, averageLumaValue2) => {\n    // calculate variance and covariance\n    let sigxy = 0.0;\n    let sigsqx = 0.0;\n    let sigsqy = 0.0;\n\n    for (let i = 0; i < lumaValues1.length; i++) {\n      sigsqx += Math.pow((lumaValues1[i] - averageLumaValue1), 2);\n      sigsqy += Math.pow((lumaValues2[i] - averageLumaValue2), 2);\n\n      sigxy += (lumaValues1[i] - averageLumaValue1) * (lumaValues2[i] - averageLumaValue2);\n    }\n\n    const numPixelsInWin = lumaValues1.length - 1;\n    sigsqx /= numPixelsInWin;\n    sigsqy /= numPixelsInWin;\n    sigxy /= numPixelsInWin;\n\n    // perform ssim calculation on window\n    const numerator = (2 * averageLumaValue1 * averageLumaValue2 + c1) * (2 * sigxy + c2);\n    const denominator = (Math.pow(averageLumaValue1, 2) + Math.pow(averageLumaValue2, 2) + c1) * (sigsqx + sigsqy + c2);\n    const ssim = numerator / denominator;\n\n    mssim += ssim;\n    numWindows++;\n\n  });\n  return mssim / numWindows;\n}\n\nfunction iterate(image1: PointContainer, image2: PointContainer, callback: (lumaValues1: number[], lumaValues2: number[], averageLumaValue1: number, averageLumaValue2: number) => void) {\n  const windowSize = 8;\n  const width = image1.getWidth();\n  const height = image1.getHeight();\n\n  for (let y = 0; y < height; y += windowSize) {\n    for (let x = 0; x < width; x += windowSize) {\n      // avoid out-of-width/height\n      const windowWidth = Math.min(windowSize, width - x);\n      const windowHeight = Math.min(windowSize, height - y);\n\n      const lumaValues1 = calculateLumaValuesForWindow(image1, x, y, windowWidth, windowHeight);\n      const lumaValues2 = calculateLumaValuesForWindow(image2, x, y, windowWidth, windowHeight);\n      const averageLuma1 = calculateAverageLuma(lumaValues1);\n      const averageLuma2 = calculateAverageLuma(lumaValues2);\n\n      callback(lumaValues1, lumaValues2, averageLuma1, averageLuma2);\n    }\n  }\n}\n\nfunction calculateLumaValuesForWindow(image: PointContainer, x: number, y: number, width: number, height: number) {\n  const pointArray = image.getPointArray();\n  const lumaValues: number[] = [];\n\n  let counter = 0;\n\n  for (let j = y; j < y + height; j++) {\n    const offset = j * image.getWidth();\n    for (let i = x; i < x + width; i++) {\n      const point = pointArray[offset + i];\n      lumaValues[counter] = point.r * Y.RED + point.g * Y.GREEN + point.b * Y.BLUE;\n      counter++;\n    }\n  }\n\n  return lumaValues;\n}\n\nfunction calculateAverageLuma(lumaValues: number[]) {\n  let sumLuma = 0.0;\n  for (const luma of lumaValues) {\n    sumLuma += luma;\n  }\n\n  return sumLuma / lumaValues.length;\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * iq.ts - Image Quantization Library\n */\nexport { ssim } from './ssim';\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var core = module.exports = { version: '2.6.11' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","module.exports = false;\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n","module.exports = require('./_shared')('native-function-to-string', Function.toString);\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar $toString = require('./_function-to-string');\nvar TO_STRING = 'toString';\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var $export = require('./_export');\nvar $task = require('./_task');\n$export($export.G + $export.B, {\n  setImmediate: $task.set,\n  clearImmediate: $task.clear\n});\n","require('../modules/web.immediate');\nmodule.exports = require('../modules/_core').setImmediate;\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * helper.ts - part of Image Quantization Library\n */\nimport * as setImmediate from 'core-js/fn/set-immediate';\nimport * as distance from './distance';\nimport * as image from './image';\nimport * as palette from './palette';\nimport { AbstractPaletteQuantizer } from './palette/paletteQuantizer';\nimport { AbstractDistanceCalculator } from './distance/distanceCalculator';\nimport { AbstractImageQuantizer } from './image/imageQuantizer';\nimport { PointContainer } from './utils/pointContainer';\nimport { Palette } from './utils/palette';\nimport { ssim } from './quality/ssim';\n\nexport type ColorDistanceFormula =\n  | 'cie94-textiles'\n  | 'cie94-graphic-arts'\n  | 'ciede2000'\n  | 'color-metric'\n  | 'euclidean'\n  | 'euclidean-bt709-noalpha'\n  | 'euclidean-bt709'\n  | 'manhattan'\n  | 'manhattan-bt709'\n  | 'manhattan-nommyde'\n  | 'pngquant';\n\nexport type PaletteQuantization =\n  | 'neuquant'\n  | 'neuquant-float'\n  | 'rgbquant'\n  | 'wuquant';\n\nexport type ImageQuantization =\n  | 'nearest'\n  | 'riemersma'\n  | 'floyd-steinberg'\n  | 'false-floyd-steinberg'\n  | 'stucki'\n  | 'atkinson'\n  | 'jarvis'\n  | 'burkes'\n  | 'sierra'\n  | 'two-sierra'\n  | 'sierra-lite';\n\nexport interface ProgressOptions {\n  onProgress?: (progress: number) => void;\n}\n\nexport interface ApplyPaletteOptions {\n  colorDistanceFormula?: ColorDistanceFormula;\n  imageQuantization?: ImageQuantization;\n}\n\nexport interface BuildPaletteOptions {\n  colorDistanceFormula?: ColorDistanceFormula;\n  paletteQuantization?: PaletteQuantization;\n  colors?: number;\n}\n\nexport function buildPaletteSync(images: PointContainer[], { colorDistanceFormula, paletteQuantization, colors }: BuildPaletteOptions = {}) {\n  const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\n  const paletteQuantizer = paletteQuantizationToPaletteQuantizer(distanceCalculator, paletteQuantization, colors);\n  images.forEach(image => paletteQuantizer.sample(image));\n  return paletteQuantizer.quantizeSync();\n}\n\nexport async function buildPalette(images: PointContainer[], { colorDistanceFormula, paletteQuantization, colors, onProgress }: BuildPaletteOptions & ProgressOptions = {}) {\n  return new Promise<Palette>((resolve, reject) => {\n    const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\n    const paletteQuantizer = paletteQuantizationToPaletteQuantizer(distanceCalculator, paletteQuantization, colors);\n    images.forEach(image => paletteQuantizer.sample(image));\n\n    let palette: Palette;\n    let timerId: number;\n    const iterator = paletteQuantizer.quantize();\n    const next = () => {\n      try {\n        const result = iterator.next();\n        if (result.done) {\n          resolve(palette);\n        } else {\n          if (result.value.palette) palette = result.value.palette;\n          if (onProgress) onProgress(result.value.progress);\n          timerId = setImmediate(next);\n        }\n      } catch (error) {\n        clearTimeout(timerId);\n        reject(error);\n      }\n    };\n    timerId = setImmediate(next);\n  });\n}\n\nexport function applyPaletteSync(image: PointContainer, palette: Palette, { colorDistanceFormula, imageQuantization }: ApplyPaletteOptions = {}) {\n  const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\n  const imageQuantizer = imageQuantizationToImageQuantizer(distanceCalculator, imageQuantization);\n  return imageQuantizer.quantizeSync(image, palette);\n}\n\nexport async function applyPalette(image: PointContainer, palette: Palette, { colorDistanceFormula, imageQuantization, onProgress }: ApplyPaletteOptions & ProgressOptions = {}) {\n  return new Promise<PointContainer>((resolve, reject) => {\n    const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\n    const imageQuantizer = imageQuantizationToImageQuantizer(distanceCalculator, imageQuantization);\n\n    let outPointContainer: PointContainer;\n    let timerId: number;\n    const iterator = imageQuantizer.quantize(image, palette);\n    const next = () => {\n      try {\n        const result = iterator.next();\n        if (result.done) {\n          resolve(outPointContainer);\n        } else {\n          if (result.value.pointContainer) outPointContainer = result.value.pointContainer;\n          if (onProgress) onProgress(result.value.progress);\n          timerId = setImmediate(next);\n        }\n      } catch (error) {\n        clearTimeout(timerId);\n        reject(error);\n      }\n    };\n    timerId = setImmediate(next);\n  });\n}\n\nfunction colorDistanceFormulaToColorDistance(colorDistanceFormula: ColorDistanceFormula = 'euclidean-bt709') {\n  switch (colorDistanceFormula) {\n    case 'cie94-graphic-arts': return new distance.CIE94GraphicArts();\n    case 'cie94-textiles': return new distance.CIE94Textiles();\n    case 'ciede2000': return new distance.CIEDE2000();\n    case 'color-metric': return new distance.CMetric();\n    case 'euclidean': return new distance.Euclidean();\n    case 'euclidean-bt709': return new distance.EuclideanBT709();\n    case 'euclidean-bt709-noalpha': return new distance.EuclideanBT709NoAlpha();\n    case 'manhattan': return new distance.Manhattan();\n    case 'manhattan-bt709': return new distance.ManhattanBT709();\n    case 'manhattan-nommyde': return new distance.ManhattanNommyde();\n    case 'pngquant': return new distance.PNGQuant();\n    default: throw new Error(`Unknown colorDistanceFormula ${colorDistanceFormula}`);\n  }\n}\n\nfunction imageQuantizationToImageQuantizer(distanceCalculator: AbstractDistanceCalculator, imageQuantization: ImageQuantization = 'floyd-steinberg') {\n  switch (imageQuantization) {\n    case 'nearest': return new image.NearestColor(distanceCalculator);\n    case 'riemersma': return new image.ErrorDiffusionRiemersma(distanceCalculator);\n    case 'floyd-steinberg': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.FloydSteinberg);\n    case 'false-floyd-steinberg': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.FalseFloydSteinberg);\n    case 'stucki': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.Stucki);\n    case 'atkinson': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.Atkinson);\n    case 'jarvis': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.Jarvis);\n    case 'burkes': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.Burkes);\n    case 'sierra': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.Sierra);\n    case 'two-sierra': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.TwoSierra);\n    case 'sierra-lite': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.SierraLite);\n    default: throw new Error(`Unknown imageQuantization ${imageQuantization}`);\n  }\n}\n\nfunction paletteQuantizationToPaletteQuantizer(distanceCalculator: AbstractDistanceCalculator, paletteQuantization: PaletteQuantization = 'wuquant', colors = 256) {\n  switch (paletteQuantization) {\n    case 'neuquant': return new palette.NeuQuant(distanceCalculator, colors);\n    case 'rgbquant': return new palette.RGBQuant(distanceCalculator, colors);\n    case 'wuquant': return new palette.WuQuant(distanceCalculator, colors);\n    case 'neuquant-float': return new palette.NeuQuantFloat(distanceCalculator, colors);\n    default: throw new Error(`Unknown paletteQuantization ${paletteQuantization}`);\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * iq.ts - Image Quantization Library\n */\nimport * as constants from './constants';\nimport * as conversion from './conversion';\nimport * as distance from './distance';\nimport * as palette from './palette';\nimport * as image from './image';\nimport * as quality from './quality';\nimport * as utils from './utils';\n\nexport {\n  buildPalette,\n  buildPaletteSync,\n  applyPalette,\n  applyPaletteSync,\n  ImageQuantization,\n  PaletteQuantization,\n  ColorDistanceFormula,\n} from './basicAPI';\n\nexport {\n  constants,\n  conversion,\n  distance,\n  palette,\n  image,\n  quality,\n  utils,\n};\n","import * as iq from \"image-q\";\n\nfunction padTime(number) {\n  return number < 10 ? \"0\" + number : number;\n}\n\nfunction getTime() {\n  const now = new Date();\n  return (\n    padTime(now.getHours()) +\n    \":\" +\n    padTime(now.getMinutes()) +\n    \":\" +\n    padTime(now.getSeconds()) +\n    \".\" +\n    now.getMilliseconds()\n  );\n}\n\nsetInterval(function () {\n  document.getElementById(\"time\").innerText = getTime();\n}, 50);\n\nfunction setPalette(points) {\n  points.forEach(function (point, index) {\n    document.getElementById(\"color-\" + index).style.backgroundColor =\n      \"rgb(\" + point.r + \",\" + point.g + \",\" + point.b + \")\";\n  });\n\n  document.getElementById(\"loader-wrapper\").style.display = \"none\";\n  document.getElementById(\"colors-wrapper\").style.display = \"block\";\n}\n\nlet worker;\nif (window.Worker) {\n  worker = new Worker(\"./worker.js\");\n  worker.onmessage = function (message) {\n    setPalette(message.data.points);\n  };\n} else {\n  // TODO: show error message\n}\n\ndocument\n  .getElementById(\"image-url-form\")\n  .addEventListener(\"submit\", function (event) {\n    event.preventDefault();\n\n    const url = event.target.elements.url.value;\n    const image = document.getElementById(\"image\");\n    image.onload = function () {\n      document.getElementById(\"image-link\").href = url;\n\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = image.naturalWidth;\n      canvas.height = image.naturalHeight;\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(image, 0, 0);\n      const imageData = context.getImageData(\n        0,\n        0,\n        image.naturalWidth,\n        image.naturalHeight\n      );\n\n      if (worker && event.target.elements.worker.checked) {\n        worker.postMessage({ imageData });\n        return;\n      }\n\n      const pointContainer = iq.utils.PointContainer.fromImageData(imageData);\n      const palette = iq.buildPaletteSync([pointContainer], { colors: 4 });\n      const points = palette._pointArray;\n      setPalette(points);\n    };\n\n    // TODO: handle image error\n\n    document.getElementById(\"loader-wrapper\").style.display = \"block\";\n    document.getElementById(\"colors-wrapper\").style.display = \"none\";\n\n    image.src = url;\n  });\n"]}